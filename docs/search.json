[
  {
    "objectID": "course_material/notes_diagnostic_tests.html",
    "href": "course_material/notes_diagnostic_tests.html",
    "title": "Evaluation of diagnostic tests",
    "section": "",
    "text": "Topics:\nBook and resources:"
  },
  {
    "objectID": "course_material/notes_diagnostic_tests.html#confusion-matrix",
    "href": "course_material/notes_diagnostic_tests.html#confusion-matrix",
    "title": "Evaluation of diagnostic tests",
    "section": "Confusion matrix",
    "text": "Confusion matrix\nDenote the subjects with positive condition as \\(P\\), and subjects with negative condition as \\(N\\).\nTotal population: \\(P+N\\)\nPrevalence (of positive condition): \\(\\frac{P}{P+N}\\)\n\n\n\n\n\n\n\n\n\nPredicted Positive\nPredicted Negative\n\n\n\n\nPositive condition \\(P\\)\nTrue Positive TP\nFalse Negative FN\n\n\nNegative condition \\(N\\)\nFalse Positive FP\nTrue Negative TN\n\n\n\nSensitivity is the probability of revealing that a person has the condition. It is also known as true positive rate (TPR), as it is the proportion of true positives.\n\\[\\text{Sensitivity}= \\frac{TP}{P} = \\frac{TP}{TP+FN}\\]\nThe complement of sensitivity (TPR) is the false negative rate (FNR),\n\\[FNR = 1-\\text{sensitivity} =\\frac{FN}{P} = \\frac{FN}{TP + FN}\\]\nSpecificity is the probability of revealing that a person does not have the condition (i.e. healthy). It is also known as true negative rate.\n\\[\\text{Specificity} = \\frac{TN}{N} = \\frac{TN}{TN + FP}\\]\nThe complement of specificity is false positive rate (FPR),\n\\[FPR = 1-\\text{specificity} =\\frac{FP}{N} = \\frac{FP}{TN + FP}\\]\nPositive predictive value (PPV): probability that the person with the condition was given a positive test result\n\\[PPV = \\frac{TP}{P_{predicted}} = \\frac{TP}{TP + FP}\\]\nNegative predictive value (NPV): probability that the person without the condition (i.e. healthy) was give a negative test result.\n\\[NPV = \\frac{TN}{N_{predicted}} = \\frac{TN}{TN + FN}\\]\n\n\n\n\n\n\nExplain\n\n\n\nuse visual aid\n\n\n\n\n\n\n\n\nExample: Mammography\n\n\n\n\n\n(From the Norwegian Medical Journal, 1990) 372 women with a lump in the breast have been referred to a surgical clinic.\n\n\n\n\nMammography benign\nMammography malign\n\n\n\n\nFinal diagnosis benign\n331\n16\n\n\nFinal diagnosis malign\n3\n22\n\n\n\nIdentify the positive test result (malign), and positive condition (diagnosis malign).\nSensitivity: \\(22/(22+3) = 0.88\\)\nSpecificity: \\(331/(331+16) = 0.95\\)\nPositive predictive value: \\(22/(22+16) = 0.58\\)\nNegative predictive value: \\(331/(331+3) = 0.99\\)"
  },
  {
    "objectID": "course_material/notes_diagnostic_tests.html#diagnostic-tests-and-prevalence",
    "href": "course_material/notes_diagnostic_tests.html#diagnostic-tests-and-prevalence",
    "title": "Evaluation of diagnostic tests",
    "section": "Diagnostic tests and prevalence",
    "text": "Diagnostic tests and prevalence\nThe concepts in diagnostic testing can be formulated in the form of conditional probability,\n\nSensitivity: \\(P(\\text{pred pos}|\\text{disease})\\)\nSpecificity: \\(P(\\text{pred neg}|\\text{healthy})\\)\nPositive predictive value: \\(P(\\text{disease}|\\text{pred pos})\\)\nNegative predictive value: \\(P(\\text{healthy}|\\text{pred neg})\\)\n\nBayes’ theorem can be applied to link sensitivity, specificity and prevalence to PPV and NPV.\nFor positive predictive value,\n\\[PPV = \\frac{\\text{sens} \\cdot \\text{prev}}{\\text{sens} \\cdot \\text{prev} + (1-\\text{spes}) \\cdot (1-\\text{prev})}\\]\nSimilarly, for negative predictive value,\n\\[NPV = \\frac{\\text{spes} \\cdot (1-\\text{prev}) }{(1-\\text{sens}) \\cdot \\text{prev} + \\text{spes} \\cdot (1-\\text{prev})}\\]\n\n\n\n\n\n\nExplain\n\n\n\nderivation?\n\n\n\nExample: HIV testing\nWe want to test for antibodies of the HIV virus.\n\nPositive result: test shows antibodies\nNegative result: test does not show antibodies\n\nThe test result may be wrong.\nA false positive might come from antibodies from related virus, but not HIV. The probability of error is 0.2%.\nA false negative might be that antibodies are not yet produced in sufficient quantity, hence are not detected by the test. The probability of error is 2%.\nAssume that prevalence of HIV is 0.1%.\nWhat is the probability of a person having HIV, if he got a positive test result?\nWhat is the probability of a person not having HIV, if he got a negative test result?\n\n\n\n\n\n\nExample: HIV testing I\n\n\n\nRecall the relation between sensitivity and false negative, and between specificity with false positive.\nWe know the following information about the test:\n\nfalse negative rate \\(FNR = 2\\%\\): sensitivity \\(\\text{sens} = 1-2\\% = 98\\%\\)\nfalse positive rate \\(FPR = 0.2\\%\\): specificity \\(\\text{spec} = 1-0.2\\% = 99.8\\%\\)\n\nFor 100 000 persons,\n\nNumber of HIV infected (positive condition): \\(100000 \\times 0.001 = 100\\)\nTrue positives: \\(100 \\times 0.98 = 98\\)\nFalse negatives: 2\nNumber of not HIV infected (negative condition): \\(100000-100 = 99900\\)\nFalse positives: \\(99900 \\times 0.002 = 199.8\\), say \\(200\\)\nTrue negatives: \\(99900 \\times 0.998 = 99700\\)\nPositive predictive value, \\(PPV = TP/(TP+FP) = 98/(98+200)= 0.329\\)\nNegative predictive value, \\(NPV = TN/(TN+FN) = 99700/(99700+2) = 0.9999\\)\n\n\n\nWe can also use the formula.\n\n\n\n\n\n\nExample: HIV testing II\n\n\n\n\\(PPV = \\frac{\\text{sens} \\cdot \\text{prev}}{\\text{sens} \\cdot \\text{prev} + (1-\\text{spes}) \\cdot (1-\\text{prev})} = \\frac{0.98 \\times 0.001}{0.98 \\times 0.001 + 0.002 \\times 0.999} = 0.329\\)\n\\(NPV = \\frac{\\text{spes} \\cdot (1-\\text{prev}) }{(1-\\text{sens}) \\cdot \\text{prev} + \\text{spes} \\cdot (1-\\text{prev})} = \\frac{0.998 \\times 0.999}{0.98 \\times 0.001 + 0.998 \\times 0.999} = 0.999\\)\n\n\n\n\nFalse positive, PPV and revalence\nAs can be seen from the HIV example, PPV (i.e. the probability of detecting an actual condition, when the test is positive) depends on prevalence.\n\nWhen prevalence is 1/10000, 1/1000, 1/100, 1/10\nCorresponding PPV: 5%, 33%, 83%, 98%\n\nThe risk of getting false positives is greater for rare diseases, and smaller for more common diseases.\nFalse positives are problematic in mass screening for disease. It is possible that the majority of the positives (test results) are false positives."
  },
  {
    "objectID": "course_material/course_material_overview.html",
    "href": "course_material/course_material_overview.html",
    "title": "Course material",
    "section": "",
    "text": "On this page you’ll find a list of material used in this course.\nFor the exercises and lab notes we use during the lab sessions, please check the R Lab and Code."
  },
  {
    "objectID": "course_material/course_material_overview.html#week-1",
    "href": "course_material/course_material_overview.html#week-1",
    "title": "Course material",
    "section": "Week 1",
    "text": "Week 1\n\n\n\nTime\nTopic\nNotes\nLab\nOther\n\n\n\n\nApril 24 PM\nCourse introduction\nSlides\n\n\n\n\n\nDescriptive statistics\nSlides, K&S chapter 2-4, Aalen chapter 1-2\n\nPaper 1, Paper 2, Paper 3\n\n\nApril 25 AM\nIntroduction to R\n\n\n\n\n\n\nLab session\n\n\n\n\n\nApril 25 PM\nProbability, diagnosistic tests\nDiagnostic tests\n\n\n\n\n\nStatistical distributions\n\n\n\n\n\nApril 26 AM\nLab session\n\n\n\n\n\nApril 26 PM\nStatistical inference, tests and confidence intervals\n\n\n\n\n\n\nt-tests\n\n\n\n\n\nApril 27 AM\nLab session\n\n\n\n\n\nApril 27 PM\nCategorical data, table analysis\n\n\n\n\n\nApril 28 AM\nLab session"
  },
  {
    "objectID": "course_material/course_material_overview.html#week-2",
    "href": "course_material/course_material_overview.html#week-2",
    "title": "Course material",
    "section": "Week 2",
    "text": "Week 2\n\n\n\n\n\n\n\n\n\n\nTime\nTopic\nNotes\nLab\nOther\n\n\n\n\nMay 8 AM\nExploratory data analysis, transformation\n\n\n\n\n\n\nNon-parametric methods\n\n\n\n\n\nMay 8 PM\nSample size, statistical power\n\n\n\n\n\nMay 9 AM\nStudy design, principles of clinical trials\n\n\n\n\n\nMay 9 PM\nLinear regression I\n\n\n\n\n\nMay 10 AM\nLinear regression II\n\n\n\n\n\nMay 10 PM\nSurvival analysis"
  },
  {
    "objectID": "lab/overview.html",
    "href": "lab/overview.html",
    "title": "R Lab and Code",
    "section": "",
    "text": "Welcome! Here you will find material for R lab and code for this course. Lecture notes, videos and other resources can be found in Course material page."
  },
  {
    "objectID": "lab/overview.html#useful-resources",
    "href": "lab/overview.html#useful-resources",
    "title": "R Lab and Code",
    "section": "Useful resources",
    "text": "Useful resources\nList of commands that are useful for this course: list of commands\nBook (Wickham et al) R for Data Science (2e)"
  },
  {
    "objectID": "lab/lab_survival.html",
    "href": "lab/lab_survival.html",
    "title": "Survival analysis",
    "section": "",
    "text": "Melanoma\n(This is the example 2 in the exercises)\nFirst we load the dataset, and check what columns are there.\n\nlibrary(survival)\n\nmelanoma <- haven::read_dta('data/melanoma.dta')\n\nhead(melanoma)\n\n# A tibble: 6 × 12\n  status    lifet…¹ ulcer…² tumor…³ gender   age group…⁴ logar…⁵  SUR_1     SE_1\n  <dbl+lbl>   <dbl> <dbl+l>   <dbl> <dbl+> <dbl> <dbl+l>   <dbl>  <dbl>    <dbl>\n1 4 [Death…  0.0274 1 [Yes]    6.76 2 [m]     76 3 [5+ …   1.91  NA     NA      \n2 4 [Death…  0.0822 2 [No]     0.65 2 [m]     56 1 [0-2…  -0.431 NA     NA      \n3 2 [Censo…  0.0959 2 [No]     1.34 2 [m]     41 1 [0-2…   0.293 NA     NA      \n4 4 [Death…  0.271  2 [No]     2.9  1 [f]     71 2 [2-5…   1.06  NA     NA      \n5 1 [Death…  0.507  1 [Yes]   12.1  2 [m]     52 3 [5+ …   2.49   0.995  0.00496\n6 1 [Death…  0.559  1 [Yes]    4.84 2 [m]     28 2 [2-5…   1.58   0.990  0.00700\n# … with 2 more variables: SUR_2 <dbl>, SE_2 <dbl>, and abbreviated variable\n#   names ¹​lifetime, ²​ulceration, ³​tumor_thickness, ⁴​grouped_tumor_thickness,\n#   ⁵​logarithm_of_tumor_thickness\n\ncolnames(melanoma)\n\n [1] \"status\"                       \"lifetime\"                    \n [3] \"ulceration\"                   \"tumor_thickness\"             \n [5] \"gender\"                       \"age\"                         \n [7] \"grouped_tumor_thickness\"      \"logarithm_of_tumor_thickness\"\n [9] \"SUR_1\"                        \"SE_1\"                        \n[11] \"SUR_2\"                        \"SE_2\"                        \n\n\n\na) Recode variable\nWe only need “death from melanoma” or else, hence we need to recode the status variable which originally had three categories.\n\n# if status == 1, code 1; otherwise, code 0\n# this indicates whether deaths from melanoma\ndeath <- ifelse(melanoma$status == 1, 1, 0)\n\n# check if the labels are correct\ntable(death)\n\ndeath\n  0   1 \n148  57 \n\ntable(melanoma$status)\n\n\n  1   2   4 \n 57 134  14 \n\n\nYou can see that the category melanoma$status == 1 should match death == 1, and melanoma$status of 2 and 4 are merged together and coded as death == 0.\n\n\nb) Kaplan-Meier plot\n\n# take lifetime variable\nlifetime <- melanoma$lifetime\n\n\nkm_fit <- survfit(Surv(lifetime, death) ~ 1)\nplot(km_fit)\n\n# add title and text\ntitle(main = 'Kaplan-Meier survival estimate', \n      xlab = 'Time', \n      ylab = 'Survival probability')\n\n\n\n\nNow we check only time 1, 2, 5.\n\n# time 1, 2, 5\ntme <- c(1, 2, 5)\nsummary(km_fit, times = tme)\n\nCall: survfit(formula = Surv(lifetime, death) ~ 1)\n\n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    1    193       6    0.970  0.0120        0.947        0.994\n    2    183       9    0.925  0.0187        0.889        0.962\n    5    122      30    0.769  0.0303        0.712        0.831\n\n\n\n\nc) Compare two genders\n\n# gender == 1: female; gender == 2: male\ngender <- melanoma$gender\n\n\nkm_fit_gender <- survfit(Surv(lifetime, death) ~ gender)\nplot(km_fit_gender, col = c('blue', 'red'))\ntitle(main = 'Kaplan-Meier survival estimate: stratify by gender', \n      xlab = 'Time', \n      ylab = 'Survial probability')\n\n# add legend\nlegend( 'bottomleft', \n       legend = c('Female', 'Male'), \n       lty = c('solid', 'solid'), \n       col = c('blue','red'))\n\n\n\n\nNow we test the difference with log-rank test\n\n# test difference with logrank test \nsurvdiff(Surv(lifetime, death) ~ gender)\n\nCall:\nsurvdiff(formula = Surv(lifetime, death) ~ gender)\n\n           N Observed Expected (O-E)^2/E (O-E)^2/V\ngender=1 126       28     37.1      2.25      6.47\ngender=2  79       29     19.9      4.21      6.47\n\n Chisq= 6.5  on 1 degrees of freedom, p= 0.01 \n\n\n\n\nd) Compare tumor thickness\nFirst we do some data processing\n\n# check the original data type \nmelanoma$grouped_tumor_thickness\n\n<labelled<double>[205]>: Thickness group\n  [1] 3 1 1 2 3 2 3 2 3 3 2 1 2 2 2 3 3 3 3 3 3 2 2 2 2 1 3 2 2 2 1 2 1 3 3 2 2\n [38] 2 1 2 2 2 3 1 2 1 2 3 1 1 2 1 1 1 1 2 1 1 1 3 1 1 1 1 1 1 1 1 3 1 1 1 2 1\n [75] 1 2 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 2 2 1 2 1 1 3 1 3 2 2 1 1 2 1 2 1 1 2 2\n[112] 2 2 1 1 1 1 1 1 1 1 3 3 1 3 2 2 1 1 3 1 2 2 1 1 1 2 1 2 1 3 1 2 1 1 2 1 1\n[149] 1 1 1 1 1 2 1 1 3 1 1 1 1 3 1 1 2 1 2 2 1 1 2 1 2 2 2 1 1 1 1 1 1 2 2 1 1\n[186] 3 1 1 1 3 3 1 2 2 1 1 1 2 1 1 3 3 1 2 2\n\nLabels:\n value  label\n     1 0-2 mm\n     2 2-5 mm\n     3  5+ mm\n\n# you can code them so that the data is more readable\ngrouped_tumor_thickness <- factor(melanoma$grouped_tumor_thickness, \n                           levels = c('1','2', '3'),\n                           labels = c('0-2 mm', '2-5 mm', '5+ mm'))\n\n# check if it is coded correctly\ntable(grouped_tumor_thickness)\n\ngrouped_tumor_thickness\n0-2 mm 2-5 mm  5+ mm \n   109     64     32 \n\ntable(melanoma$grouped_tumor_thickness)\n\n\n  1   2   3 \n109  64  32 \n\n\nNow we plot the KM plot, and carry out a log-rank test\n\nkm_fit_tumor <- survfit(Surv(lifetime, death) ~ grouped_tumor_thickness)\nplot(km_fit_tumor, col = c('blue', 'red', 'forestgreen'))\n\ntitle(main = 'Kaplan-Meier survival estimate: stratify by tumor thickness', \n      xlab = 'Time', \n      ylab = 'Survial probability')\n\n# add legend\nlegend( 'bottomleft', \n        legend = c('0-2 mm', '2-5 mm', '5+ mm'), \n        lty = c('solid', 'solid', 'solid'), \n        col = c('blue','red', 'forestgreen'))\n\n\n\n# test difference with logrank test \nsurvdiff(Surv(lifetime, death) ~ grouped_tumor_thickness)\n\nCall:\nsurvdiff(formula = Surv(lifetime, death) ~ grouped_tumor_thickness)\n\n                                 N Observed Expected (O-E)^2/E (O-E)^2/V\ngrouped_tumor_thickness=0-2 mm 109       13    33.75     12.75     31.36\ngrouped_tumor_thickness=2-5 mm  64       30    16.39     11.30     15.88\ngrouped_tumor_thickness=5+ mm   32       14     6.86      7.42      8.45\n\n Chisq= 31.6  on 2 degrees of freedom, p= 1e-07 \n\n\n\n\n\nLength of hospital stay\n(This is the exercise 3 from the exercise for day 7)\n\nliggetid <- haven::read_dta('data/liggetid.dta')\nhead(liggetid)\n\n# A tibble: 6 × 21\n   faar fmaan  fdag innaar innmaan inndag utaar utmaan utdag kjoenn     kom_fra \n  <dbl> <dbl> <dbl>  <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl> <dbl+lbl>  <dbl+lb>\n1  1906     3     4   1987       3      5    87      3    18 0 [kvinne] 1 [hjem]\n2  1891     4     3   1987       3      6    87      3    23 0 [kvinne] 1 [hjem]\n3  1908     9     6   1987       3     10    87      3    16 0 [kvinne] 1 [hjem]\n4  1910     1    11   1987       3     11    87      3    25 1 [mann]   1 [hjem]\n5  1907     1     6   1987       3     13    87      3    30 0 [kvinne] 1 [hjem]\n6  1901    12    19   1987       3     13    87      4     2 0 [kvinne] 1 [hjem]\n# … with 10 more variables: slag <dbl+lbl>, alder <dbl>, liggetid <dbl>,\n#   lnliggti <dbl>, kom_fra2 <dbl>, kom_fra3 <dbl>, kom_fra4 <dbl>,\n#   kom_fra5 <dbl>, kom_fra6 <dbl>, status <dbl>\n\ncolnames(liggetid)\n\n [1] \"faar\"     \"fmaan\"    \"fdag\"     \"innaar\"   \"innmaan\"  \"inndag\"  \n [7] \"utaar\"    \"utmaan\"   \"utdag\"    \"kjoenn\"   \"kom_fra\"  \"slag\"    \n[13] \"alder\"    \"liggetid\" \"lnliggti\" \"kom_fra2\" \"kom_fra3\" \"kom_fra4\"\n[19] \"kom_fra5\" \"kom_fra6\" \"status\"  \n\n# all status are 1 \nstatus <- liggetid$status\n\n\na) Length of stay vs gender\n\n# length of stay (los) vs gender\nlos <- liggetid$liggetid\nhead(los)\n\n[1] 13 17  6 14 17 20\n\n# can choose to recode; or leave as it is;\n# gender == 0: female; gender == 1: male\ngender <- liggetid$kjoenn\nhead(gender)\n\n<labelled<double>[6]>\n[1] 0 0 0 1 0 0\n\nLabels:\n value  label\n     0 kvinne\n     1   mann\n\n# fit km \nkm_liggetid_gender <- survfit(Surv(los, status) ~ gender)\n\nplot(km_liggetid_gender, col = c('blue', 'red'))\n\ntitle(main = 'Kaplan-Meier survival estimate: stratify by gender', \n      xlab = 'Time', \n      ylab = 'Survial probability')\n\n# add legend\nlegend( 'topright', \n        legend = c('Female', 'Male'), \n        lty = c('solid', 'solid'), \n        col = c('blue','red'))\n\n\n\n\nNow we do log-rank test\n\n# log rank test \nsurvdiff(Surv(los, status) ~ gender)\n\nCall:\nsurvdiff(formula = Surv(los, status) ~ gender)\n\nn=1138, 1 observation deleted due to missingness.\n\n           N Observed Expected (O-E)^2/E (O-E)^2/V\ngender=0 714      714      799      9.06      31.9\ngender=1 424      424      339     21.36      31.9\n\n Chisq= 31.9  on 1 degrees of freedom, p= 2e-08 \n\n\n\n\nb) Length of stay vs stroke\n\n# length of stay vs stroke\n# slag == 1: yes, slag == 2: no\nstroke <- liggetid$slag\n\n# fit km \nkm_liggetid_stroke <- survfit(Surv(los, status) ~ stroke)\n\nplot(km_liggetid_stroke, col = c('blue', 'red'))\n\ntitle(main = 'Kaplan-Meier survival estimate: stratify by stroke', \n      xlab = 'Time', \n      ylab = 'Survial probability')\n\n# add legend\nlegend( 'topright', \n        legend = c('Stroke: yes', 'Stroke: no'), \n        lty = c('solid', 'solid'), \n        col = c('blue','red'))\n\n\n\n\n\n# log rank test\nsurvdiff(Surv(los, status) ~ stroke)\n\nCall:\nsurvdiff(formula = Surv(los, status) ~ stroke)\n\nn=1054, 85 observations deleted due to missingness.\n\n           N Observed Expected (O-E)^2/E (O-E)^2/V\nstroke=0 891      891      864     0.814      4.61\nstroke=1 163      163      190     3.714      4.61\n\n Chisq= 4.6  on 1 degrees of freedom, p= 0.03"
  },
  {
    "objectID": "lab/lab_ttest.html#exercise-1-heart-data",
    "href": "lab/lab_ttest.html#exercise-1-heart-data",
    "title": "t-test",
    "section": "Exercise 1 (heart data)",
    "text": "Exercise 1 (heart data)\nThe weight of the hearts of 20 men with age between 25 and 55 years have been evaluated, and is given below (in ounces, 1 ounce = 28g)\n11.50 14.75 13.75 10.50 14.75 13.50 10.75 9.50 11.75 12.00\n10.50 11.75 10.00 14.50 12.00 11.00 14.00 15.00 11.50 10.25\n\n1a)\nCreate a variable in R, and enter the data. Compute the mean weight of the hearts based on the formula; then verify it with R function.\n\n\n\n\n\n\nFormula: mean\n\n\n\nThe mean of data \\(X = (x_1, x_2, ... x_n)\\), \\(\\bar{x} = \\frac{1}{n}\\sum_{i = 1}^N x_i\\)\n\n\n\n# enter the data\nheart <- c(11.5, 14.75, 13.75, 10.5, 14.75,\n           13.5, 10.75, 9.5, 11.75, 12, \n           10.5, 11.75, 10, 14.5, 12, \n           11, 14, 15, 11.5, 10.25)\n\n\n# compute the mean\nsum_heart <- 11.5 + 14.75 + 13.75 + 10.5 + 14.75 + \n  13.5 + 10.75 + 9.5 + 11.75 + 12 + \n  10.5 + 11.75 + 10 + 14.5 + 12 + \n  11 + 14 + 15 + 11.5 + 10.25\n\nn <- 20 # length(heart)\n\nsum_heart\n\n[1] 243.25\n\nsum_heart/20\n\n[1] 12.1625\n\n# formula: sum(heart)/length(heart)\nmean(heart)  # 12.162\n\n[1] 12.1625\n\n\n\n\n1b)\nCompute the 95% confidence interval for the mean. Verify your computed confidence interval with R function t.test(heart).\n\n\n\n\n\n\nFormula: confidence interval for the mean\n\n\n\n\n\n\n\n# standard deviation, 95% confidence interval\n\n# formula (sd): sqrt(1/(n-1) * (sum(xi - xbar)^2))\n# translate into format that R can understand:\n\nn <- 20  # length(heart)\nsqrt(1/(n-1) * (sum((heart - mean(heart))^2))) # be careful with brackets\n\n[1] 1.779405\n\nsd(heart) # 1.779\n\n[1] 1.779405\n\n# 95% CI (quantile from t-distribution)\n# formula: CI = xbar +- t(n-1, alpha/2) * sd/sqrt(n)\n# translate into format R can understand:\n\nt025 <- qt(p = 0.025, df = n-1) # -2.09\nt975 <- qt(p = 0.975, df = n-1) # 2.09\nc(t025, t975) # symmetric around 0\n\n[1] -2.093024  2.093024\n\n# plug in the formula\nci_lower <- mean(heart) - t975 * sd(heart)/sqrt(n)\nci_upper <- mean(heart) + t975 * sd(heart)/sqrt(n)\nc(ci_lower, ci_upper)\n\n[1] 11.32971 12.99529\n\n# verify by doing a one-sample t-test\n# by default, it tests whether mean is 0\nt.test(heart)\n\n\n    One Sample t-test\n\ndata:  heart\nt = 30.568, df = 19, p-value < 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 11.32971 12.99529\nsample estimates:\nmean of x \n  12.1625 \n\n\n\n\n1c)\nWe would like to know whether the mean heart weight is equal to 11 and 11.5.\nBefore you carry out hypothesis tests, you can gain useful insight by visualization. You can try to use histogram, Q-Q plot and boxplot, and compare the mean heart weight with 11 and 11.5.\nWhat can you conclude?\n\npar(mfrow = c(1, 2))\n# histogram\nhist(heart, breaks = 10, main = 'Histogram of heart data')\nabline(v = mean(heart), col = 'red', lwd = 2)\nabline(v = c(ci_lower, ci_upper), col = 'red', lwd = 2,\n       lty = 'dashed')\n\n# qqplot \nqqnorm(heart, pch = 20)\nqqline(heart, lwd = 2)\n\n\n\n\n\n# boxplot \npar(mfrow = c(1, 2))\n# compare with 11\nboxplot(heart, horizontal = T, main = 'Compare with mean = 11')\nabline(v = mean(heart), col = 'red', lwd = 3)\nabline(v = c(ci_lower, ci_upper), col = 'red', lwd = 2,\n       lty = 'dashed')\nabline(v = 11, col = 'forestgreen', lwd = 3)\n\n\n# compare with 11.5\nboxplot(heart, horizontal = T, main = 'Compare with mean = 11.5')\nabline(v = mean(heart), col = 'red', lwd = 3)\nabline(v = c(ci_lower, ci_upper), col = 'red', lwd = 2,\n       lty = 'dashed')\nabline(v = 11.5, col = 'forestgreen', lwd = 3)\n\n\n\n\n\n\n1d)\nFormulate hypothesis tests. Decide whether you need one-sided or two-sided test, and state your conclusion (with p-values and confidence intervals).\n\n# H0: mu = 11; H1: mu != 11\nt.test(heart, mu = 11, conf.level = 0.95)\n\n\n    One Sample t-test\n\ndata:  heart\nt = 2.9217, df = 19, p-value = 0.008751\nalternative hypothesis: true mean is not equal to 11\n95 percent confidence interval:\n 11.32971 12.99529\nsample estimates:\nmean of x \n  12.1625 \n\n# H0: mu = 11.5; H1: mu != 11.5\nt.test(heart, mu = 11.5, conf.level = 0.95)\n\n\n    One Sample t-test\n\ndata:  heart\nt = 1.665, df = 19, p-value = 0.1123\nalternative hypothesis: true mean is not equal to 11.5\n95 percent confidence interval:\n 11.32971 12.99529\nsample estimates:\nmean of x \n  12.1625"
  },
  {
    "objectID": "lab/lab_ttest.html#exercise-2-lung-function",
    "href": "lab/lab_ttest.html#exercise-2-lung-function",
    "title": "t-test",
    "section": "Exercise 2 (lung function)",
    "text": "Exercise 2 (lung function)\nLung function has been measured on 106 medical students. Peak expiratory flow rate (PEF, measured in liters per minute) was measured three times in a sittinng position, and three times in a standing position.\nThe variables are\n\nAge (years)\nGender (1 is female, 2 is male)\nHeight (cm)\nWeight (kg)\nPEF measured three times in a sitting position (pefsit1, pefsit2, pefsit3)\nPEF measured three times in a standing position (pefsta1, pefsta2, pefsta3)\nMean of the three measurements made in a sitting position (pefsitm)\nMean of the three measurements made in a standing position (pefstam)\nMean of all six PEF values (pefmean)\n\n\n\n\n\n\n\nLung function data\n\n\n\nThis is the same dataset we have used in EDA (part I) from two days ago. You can use either PEFH98-english.dta, or PEFH98-english.csv data.\nIf you forgot how to load the data, you can refresh your knowledge by reading these notes (Example 2)\n\n\n\n2a)\nOpen PEFH98-english.dta (or PEFH98-english.csv) into R.\nPay attention to how gender is coded. We might have to modify it.\nDetermine the mean height for females. Calculate the standard deviation and a 95% confidence interval. How would you comment on this result?\nDo the same for males.\n\nlung_data <- haven::read_dta('data/PEFH98-english.dta')\n\n# recode gender: female, male\nlung_data$gender <- factor(lung_data$gender, \n                           levels = c('1','2'),\n                           labels = c('female','male')) \n# head(lung_data)\n# we can focus on height and gender variable only\nhead(lung_data[, c('height', 'gender')], 10)\n\n# A tibble: 10 × 2\n   height gender\n    <dbl> <fct> \n 1    165 female\n 2    185 male  \n 3    178 male  \n 4    179 male  \n 5    196 male  \n 6    189 male  \n 7    173 male  \n 8    196 male  \n 9    173 female\n10    173 female\n\n\nNow we need to separate the height data for based on gender. First, we do it for gender == 'female'.\n\n# for convenience, we create a variable names 'gender'\ngender <- lung_data$gender\n# height for female\nheight_f <- lung_data$height[gender == 'female']\n\nYou should always check whether your newly created variable is correct: for example, you can compare the first several values of height_f with the original data, to see if it is really only selecting height for females.\nAnother useful thing to do is to check how many data poinnts have been selected.\n\n# check the first few values, is it only selecting female heights?\nhead(height_f)\n\n[1] 165 173 173 169 170 172\n\n# number of females\nnf <- length(height_f)  # 54\nnf\n\n[1] 54\n\n\nNow we can compute the mean and confidence interval on the newly created variable, height_f.\n\nmean(height_f) # 169.57\n\n[1] 169.5741\n\nsd(height_f) # 5.69\n\n[1] 5.692106\n\n# se_f <- sd(height_f)/sqrt(54) 0.774\n\n# quantile for t distribution: pay attention to df!\nt975 <- qt(p = 0.975, df = nf-1) # 2.005\n\n# 95% CI \nci_upper_f <- mean(height_f) + t975 * sd(height_f)/sqrt(nf) # 171.1277\nci_lower_f <- mean(height_f) - t975 * sd(height_f)/sqrt(nf) # 168.0204\nc(ci_lower_f, ci_upper_f)\n\n[1] 168.0204 171.1277\n\n# double check by running a t.test\nt.test(height_f)\n\n\n    One Sample t-test\n\ndata:  height_f\nt = 218.92, df = 53, p-value < 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 168.0204 171.1277\nsample estimates:\nmean of x \n 169.5741 \n\n\nFor gender == 'male', we can do the same thing. Pay attention to the different degrees of freedom, because the sample size has changed.\n\n# height for male \nheight_m <- lung_data$height[gender == 'male']\n# number of males\nnm <- length(height_m)  # 52\n\nmean(height_m) # 181.87\n\n[1] 181.8654\n\nsd(height_m) # 5.67\n\n[1] 5.667343\n\n# se_m <- sd(height_m)/sqrt(52) # 0.786\n\n# find quantile for males (pay attention to df)\nt975 <- qt(p = 0.975, df = nm-1) # 2.007\n# 95% CI\nci_upper_m <- mean(height_m) + t975 * sd(height_m)/sqrt(nm) # 183.44\nci_lower_m <- mean(height_m) - t975 * sd(height_m)/sqrt(nm)  # 180.28\nc(ci_lower_m, ci_upper_m)\n\n[1] 180.2876 183.4432\n\n# verify by t.test\nt.test(height_m)\n\n\n    One Sample t-test\n\ndata:  height_m\nt = 231.4, df = 51, p-value < 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 180.2876 183.4432\nsample estimates:\nmean of x \n 181.8654 \n\n\n\n\n2b)\nAssume that the average height for female students a few years ago was 167 cm. Does the height in the present material differ significantly?\nFormulate a null hypothesis, calculate a test statistic and p-value.\n\n# use t.test command\nt.test(height_f, mu = 167)\n\n\n    One Sample t-test\n\ndata:  height_f\nt = 3.3231, df = 53, p-value = 0.001619\nalternative hypothesis: true mean is not equal to 167\n95 percent confidence interval:\n 168.0204 171.1277\nsample estimates:\nmean of x \n 169.5741 \n\n# alternatively, \n# calculate by hand\nt_stat <- (mean(height_f) - 167)/(sd(height_f)/sqrt(nf))\nt_stat  # 3.323\n\n[1] 3.323112\n\n# compare this with t distribution with nf-1 degrees of freedom\npval_twosided <- pt(q = t_stat, df = nf-1, lower.tail = F)*2\npval_twosided\n\n[1] 0.001618751\n\n\n\n\n2c)\nDo the values pefsit1 and pefsit2 differ significantly? Calculate a test statistic, the mean difference, and the 95% confidence interval, and formulate a conclusion. Interpret the results.\n\npefsit1 <- lung_data$pefsit1\npefsit2 <- lung_data$pefsit2\n# hist(pefsit1)\n# hist(pefsit2)\n\nt.test(pefsit1, pefsit2, paired = T)\n\n\n    Paired t-test\n\ndata:  pefsit1 and pefsit2\nt = -1.5781, df = 104, p-value = 0.1176\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -9.929056  1.129056\nsample estimates:\nmean difference \n           -4.4 \n\n# alternatively, you can test whether the difference is equal to 0\ndiff_sit1_sit2 <- pefsit1 - pefsit2\nt.test(diff_sit1_sit2, mu = 0)\n\n\n    One Sample t-test\n\ndata:  diff_sit1_sit2\nt = -1.5781, df = 104, p-value = 0.1176\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n -9.929056  1.129056\nsample estimates:\nmean of x \n     -4.4 \n\n\n\n\n2d)\nCarry out a t-test to decide whether pefsitm annd pefstam are significantly different.\n\n# compare pefsitm, pefstam (paired t-test)\npefsitm <- lung_data$pefsitm\npefstam <- lung_data$pefstam\n\nt.test(pefsitm, pefstam, paired = T)\n\n\n    Paired t-test\n\ndata:  pefsitm and pefstam\nt = -3.6974, df = 104, p-value = 0.0003498\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -14.656161  -4.423204\nsample estimates:\nmean difference \n      -9.539683 \n\n\n\n\n2e)\nAre the assumptions of the previous test reasonably fulfilled?\nYou should check that the difference between pefsitm and pefstam is normally distributed.\n\n\n\n\n\n\nExpand to read hint\n\n\n\n\n\nYou can create a new variable called difference by difference <- pefsitm - pefstam, then check the normality of difference by looking at histogram (hist(difference)), or QQ plot (qnorm difference)\n\n\n\n\n# create a variable\ndiff_sitm_stam <- pefsitm - pefstam\nqqnorm(diff_sitm_stam, pch = 20)\nqqline(diff_sitm_stam, col = 'red', lwd = 2)\n\n\n\n\n\n\n2f)\nCarry out a t-test to evaluate whether pefmean is signinficantly different for men and women.\nInterpret the results, and formulate a conclusion including p-value and confidence interval.\n\n# this is independent two samples t-test\n# we need two variables: pefmean for men, pefmean for women\n\npefmean_f <- lung_data$pefmean[gender == 'female']\npefmean_m <- lung_data$pefmean[gender == 'male']\n\n\n# visually spot whether there is a difference\n# NOTE: there is a NA in pefmean_f\npar(mfrow = c(1, 2))\nhist(pefmean_f, main = 'pefmean (F)')\nabline(v = mean(pefmean_f, na.rm = T), col = 'red', lwd = 2)\nhist(pefmean_m, main = 'pefmean (M)')\nabline(v = mean(pefmean_m), col = 'red', lwd = 2)\n\n\n\n# two sample t-test \nt.test(pefmean_f, pefmean_m, paired = F)\n\n\n    Welch Two Sample t-test\n\ndata:  pefmean_f and pefmean_m\nt = -12.425, df = 90.28, p-value < 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -207.6366 -150.3941\nsample estimates:\nmean of x mean of y \n 425.2987  604.3141 \n\n\n\n\n2g)\nAre the assumptions fulfilled in the previous test (pefmean vs gender)?\n\npar(mfrow = c(1, 2))\nqqnorm(pefmean_f, pch = 20, main = 'Q-Q plot: pefmean (F)')\nqqline(pefmean_f, col = 'red', lwd = 2)\n\nqqnorm(pefmean_m, pch = 20, main = 'Q-Q plot: pefmean (M)')\nqqline(pefmean_m, col = 'red', lwd = 2)"
  },
  {
    "objectID": "lab/ex_categorical.html",
    "href": "lab/ex_categorical.html",
    "title": "Exercise - Categorical data analysis",
    "section": "",
    "text": "Datasets for exercises\n\n\n\nFor exercise I, it is the same dataset we have used in EDA (part I) from two days ago. You can use either PEFH98-english.dta, or PEFH98-english.csv data.\nFor exercise II, we use a dataset called birth.dta (or birth.csv).\nIf you forgot how to load the data, you can refresh your knowledge by reading these notes (Example 2)"
  },
  {
    "objectID": "lab/ex_categorical.html#exercise-1-lung-function",
    "href": "lab/ex_categorical.html#exercise-1-lung-function",
    "title": "Exercise - Categorical data analysis",
    "section": "Exercise 1 (lung function)",
    "text": "Exercise 1 (lung function)\nLung function has been measured on 106 medical students. Peak expiratory flow rate (PEF, measured in liters per minute) was measured three times in a sitting position, and three times in a standing position.\nThe variables are\n\nAge (years)\nGender (1 is female, 2 is male)\nHeight (cm)\nWeight (kg)\nPEF measured three times in a sitting position (pefsit1, pefsit2, pefsit3)\nPEF measured three times in a standing position (pefsta1, pefsta2, pefsta3)\nMean of the three measurements made in a sitting position (pefsitm)\nMean of the three measurements made in a standing position (pefstam)\nMean of all six PEF values (pefmean)\n\n\n1a)\nWe investigate whether having a high value of pefmean is associated with gender.\nFirst, create a new variable highpef that indicates whether pefmean is above 500.\n\n\n1b)\nWe investigate the association between these two variables via an appropriate table analysis. Make a table of highpef vs gender, and carry out a chi-square analysis. Interpret your results.\n\n\n1c)\nCompute risk ratio and odds ratio (only the point estimates). Here the exposure is gender (we assume that the reference group is female: unexposed), and outcome is highpef. Interpret your results.\n\n\n\n\n\n\nRisk ratio and odds ratio\n\n\n\n\n\n\n\n\n\nOutcome (yes)\nOutcome (no)\n\n\n\n\nExposed\na\nb\n\n\nUnexposed\nc\nd\n\n\n\nRisk ratio: \\(\\frac{a/(a+b)}{c/(c+d)}\\)\nOdds ratio: \\(\\frac{a/b}{c/d} = \\frac{ad}{bc}\\)"
  },
  {
    "objectID": "lab/ex_categorical.html#exercise-2-birth-data",
    "href": "lab/ex_categorical.html#exercise-2-birth-data",
    "title": "Exercise - Categorical data analysis",
    "section": "Exercise 2 (birth data)",
    "text": "Exercise 2 (birth data)\nWe shall analyse the data set given in the file birth.dta. In a study in Massachusetts, USA, birth weight was measured for the children of 189 women. The main variable in the study was birth weight, BWT, which is an important indicator of the condition of a newborn child. Low birth weight (below 2500 g) may be a medical risk factor. A major question is whether smoking during pregnancy influences the birth weight. One has also studied whether a number of other factors are related to birth weight, such as hypertension in the mother.\nThe variables of the study are\n\nIdentification number (ID)\nLow birth weight, 1 means \\(BWT \\leq 2500g\\), 0 means \\(BWT > 2500g\\) (LOW)\nAge of the mother (AGE)\nWeight (in pounds) at last menstruaal period (LWT)\nEthnicity, 1 means White, 2 means African American, 3 meaans other (ETH)\nSmoking status, 1 means current smoker, 0 means not smoking during pregnancy (SMK)\nHistory of premature labbour, values 0, 1, 2… (PTL)\nHistory of hypertension, 1 is yes, 0 is no (HT)\nUterine irritability, 1 is yes, 0 is no (UI)\nFirst trimester visits, values 0, 1, 2… (FTV)\nThird trimster visits, values 0, 1, 2… (TTV)\nBirth weight (BWT)\n\n\n2a)\nDoes smoking influence the birth weight of a baby?\nMake a histogram and a box plot, and find the median and mean for birth weight in grams (BWT) for the two groups of mothers: group 1 that smokes, and group 2 that does not smoke durinng the pregnancy. (Hint: use variable SMK for this task)\n\n\n2b)\nAre the distributions for the two groups normal? Can we conclude that smoking has an effect on the weight of a newborn? Use a t-test.\n\n\n2c)\nDo mothers of hypertension have a tendency to have babies with a lower birth weight? (The variable for hypertension is HT)\nMake a histogram of birth weight for the two groups of mothers with and without hypertension. What do you observe?"
  },
  {
    "objectID": "lab/lab_categorical.html#exercise-1-lung-function",
    "href": "lab/lab_categorical.html#exercise-1-lung-function",
    "title": "Categorical data analysis",
    "section": "Exercise 1 (lung function)",
    "text": "Exercise 1 (lung function)\nLung function has been measured on 106 medical students. Peak expiratory flow rate (PEF, measured in liters per minute) was measured three times in a sittinng position, and three times in a standing position.\nThe variables are\n\nAge (years)\nGender (1 is female, 2 is male)\nHeight (cm)\nWeight (kg)\nPEF measured three times in a sitting position (pefsit1, pefsit2, pefsit3)\nPEF measured three times in a standing position (pefsta1, pefsta2, pefsta3)\nMean of the three measurements made in a sitting position (pefsitm)\nMean of the three measurements made in a standing position (pefstam)\nMean of all six PEF values (pefmean)\n\n\n1a)\nWe investigate whether having a high value of pefmean is associated with gender. First, create a new variable highpef that indicates whether pefmean is above 500.\n\nlung_data <- haven::read_dta('data/PEFH98-english.dta')\n\n# recode gender: female, male\nlung_data$gender <- factor(lung_data$gender, \n                           levels = c('1','2'),\n                           labels = c('female','male')) \n# head(lung_data)\n\n# examine variable pefmean\n# visualise the distribution\nhist(lung_data$pefmean)\nabline(v = 500, col = 'red', lwd = 2)\n\n\n\n\nThere are multiple ways to do it. Here we show two of them.\nIn option 1, we use the function ifelse(). It will create a binary vector, and fill in different output based on whether the condition was true or not.\n\n# option 1\n# code new variable: highpef with cutoff = 500\n# this is a binary variable, 1 means yes (higher than 500), 0 means no\nhighpef <- ifelse(lung_data$pefmean > 500, '1', '0')\n\n# check if it makes sense\nhead(lung_data$pefmean)\n\n[1] 405.0000 491.6667 505.0000 513.3333 725.0000 602.5000\n\nhead(highpef)\n\n[1] \"0\" \"0\" \"1\" \"1\" \"1\" \"1\"\n\n\nIn option 2, we create a vector with a pre-specified value, then replace the elements for given indices.\n\n# option 2 \n# create a vector with all '0's\n# then set the elements above 500 in 'pefmean' as '1'\n# (replacement with index)\n\nn <- length(lung_data$pefmean) # 106\nhighpef_alt <- rep('0', n) # repeat '0' 106 times\nhighpef_alt[lung_data$pefmean > 500] <- '1'\nhead(highpef_alt)\n\n[1] \"0\" \"0\" \"1\" \"1\" \"1\" \"1\"\n\n\n\n\n1b)\nWe investigate the association between these two variables via an appropriate table analysis. Make a table of highpef vs gender, and carry out a chi-square analysis. Interpret your results.\n\n# take out gender variable so we don't need to use $ any more\ngender <- lung_data$gender\n\n# we can count how many subjects are in each category for the two variables\n# put in two tables \ntable(gender)\n\ngender\nfemale   male \n    54     52 \n\ntable(highpef)\n\nhighpef\n 0  1 \n54 51 \n\n# now we count how many subjects are in the combinations \ntable_gender_highpef <- table(gender, highpef)\ntable_gender_highpef\n\n        highpef\ngender    0  1\n  female 48  5\n  male    6 46\n\n\nWe do a chi-square test with chisq.test() function. To read more about what is required as input, you can use ?chisq.test() to get the documentation.\n\n# note: \n# we have not distinguished between exposure and outcome\n# by default, 'table' function puts the first input in rows (gender)\n# the order does not affect the result of chi-square test\n\nchisq.test(table_gender_highpef)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  table_gender_highpef\nX-squared = 62.498, df = 1, p-value = 2.667e-15\n\n\n\n\n\n\n\n\nChi-square test measures strength of association\n\n\n\nIt is worth pointing out that chisq.test() does not distinguish between exposure and outcome variables. If you reverse the variable order, the test-statistic and p-value is exactly the same.\nThis is why you should always be clear in your mind what is your exposure and outcome, and report risk ratio and/or odds ratio.\n\n\n\n# reverse the order of the two variables\ntable_highpef_gender <- table(highpef, gender)\nchisq.test(table_highpef_gender)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  table_highpef_gender\nX-squared = 62.498, df = 1, p-value = 2.667e-15\n\n\n\n\n1c)\nCompute risk ratio and odds ratio (only the point estimates). Here the exposure is gender (we assume that the reference group is female: unexposed), and outcome is highpef. Interpret your results.\n\n\n\n\n\n\nRisk ratio and odds ratio\n\n\n\n\n\n\n\n\n\nOutcome (yes)\nOutcome (no)\n\n\n\n\nExposed\na\nb\n\n\nUnexposed\nc\nd\n\n\n\nRisk ratio: \\(\\frac{a/(a+b)}{c/(c+d)}\\)\nOdds ratio: \\(\\frac{a/b}{c/d} = \\frac{ad}{bc}\\)\n\n\n\nIt could help by drawing a table before computing the metrics.\n\n\n\n\nOutcome (highpef = 1)\nOutcome (highpef = 0)\n\n\n\n\nExposed (gender = male)\n46\n6\n\n\nUnexposed (gender = female)\n5\n48\n\n\n\n\n# first use formula (only point estimates)\n# risk ratio (relative risk)\n# risk in exposed / risk in unexposed\n\nrisk_exposed <- 46/(46+6)  # 0.885\nrisk_unexposed <- 5/(5+48) # 0.094\nrr <- risk_exposed/risk_unexposed\nrr  # 9.37\n\n[1] 9.376923\n\n# odds ratio\n# odds of event in exposed group / odds of event in non-exposed group\nodds_exposed <- 46/6  # 7.667\nodds_unexposed <- 5/48  # 0.104\nor <- odds_exposed/odds_unexposed\nor # 73.6\n\n[1] 73.6\n\n\n\n\nOptional\nYou can verify if this is correct with some R packages that implement risk ratio and odds ratio.\n\n\n\n\n\n\nBe careful with the input format when using packages\n\n\n\nDifferent packages can have different requirements for how your data input should look like. Always check documentation to get the correct result.\nThis is also true with other softwares like STATA.\nComparison of different packages in computing risk ratio: read this discussion\nDocumentation: epitools Documentation: epiR\n\n\nThe first function we use is epitab from epitools package.\n\n# install.packages('epitools')\n\n# match the expected data format\n# col: outcome -, outcome +\n# row: exposure -, exposure +\ntb1 <- matrix(c(48, 5, 6, 46), byrow = T, ncol = 2)\ntb1\n\n     [,1] [,2]\n[1,]   48    5\n[2,]    6   46\n\nepitools::epitab(tb1, method = 'riskratio')\n\n$tab\n          Outcome\nPredictor  Disease1        p0 Disease2         p1 riskratio    lower    upper\n  Exposed1       48 0.9056604        5 0.09433962  1.000000       NA       NA\n  Exposed2        6 0.1153846       46 0.88461538  9.376923 4.048485 21.71842\n          Outcome\nPredictor      p.value\n  Exposed1          NA\n  Exposed2 2.16777e-17\n\n$measure\n[1] \"wald\"\n\n$conf.level\n[1] 0.95\n\n$pvalue\n[1] \"fisher.exact\"\n\nepitools::epitab(tb1, method = 'oddsratio')\n\n$tab\n          Outcome\nPredictor  Disease1        p0 Disease2         p1 oddsratio    lower    upper\n  Exposed1       48 0.8888889        5 0.09803922       1.0       NA       NA\n  Exposed2        6 0.1111111       46 0.90196078      73.6 21.00627 257.8735\n          Outcome\nPredictor      p.value\n  Exposed1          NA\n  Exposed2 2.16777e-17\n\n$measure\n[1] \"wald\"\n\n$conf.level\n[1] 0.95\n\n$pvalue\n[1] \"fisher.exact\"\n\n\nThe second function we use is epi.2by2 from epiR package.\n\n# install.packages('epiR')\n\n# match the expected data format\n# col: outcome +, outcome -\n# row: exposure +, exposure -\ntb2 <- matrix(c(46, 6, 5, 48), byrow = T, ncol = 2)\ntb2\n\n     [,1] [,2]\n[1,]   46    6\n[2,]    5   48\n\nepiR::epi.2by2(tb2, method = 'cohort.count')\n\n             Outcome +    Outcome -      Total                 Inc risk *\nExposed +           46            6         52     88.46 (76.56 to 95.65)\nExposed -            5           48         53       9.43 (3.13 to 20.66)\nTotal               51           54        105     48.57 (38.70 to 58.53)\n\nPoint estimates and 95% CIs:\n-------------------------------------------------------------------\nInc risk ratio                                 9.38 (4.05, 21.72)\nOdds ratio                                     73.60 (21.01, 257.87)\nAttrib risk in the exposed *                   79.03 (67.31, 90.75)\nAttrib fraction in the exposed (%)            89.34 (75.30, 95.40)\nAttrib risk in the population *                39.14 (26.76, 51.52)\nAttrib fraction in the population (%)         80.58 (57.91, 91.04)\n-------------------------------------------------------------------\nUncorrected chi2 test that OR = 1: chi2(1) = 65.624 Pr>chi2 = <0.001\nFisher exact test that OR = 1: Pr>chi2 = <0.001\n Wald confidence limits\n CI: confidence interval\n * Outcomes per 100 population units"
  },
  {
    "objectID": "lab/list_of_commands.html",
    "href": "lab/list_of_commands.html",
    "title": "List of commands",
    "section": "",
    "text": "Data\n\nData import\n\nread.csv('data/your_data.csv', sep = ',')\n\n\n\nCreate variables\nCreate a numeric variable\n\na <- 3\na  # return the value in console\nreturn(a)\n\nNumeric, character, logical variables\n\nclass(a)\n\nb <- 'hadley'\nclass(b)\n\nc <- TRUE\nclass(c)\n\n\n\nData structure (vector, matrix)\nCreate vectors and matrices\n\nnum_vector <- c(1, 2, 3, 4, 5)\nchar_vector <- c('student_a', 'student_b', 'student_c')\nlogical_vector <- c(T, F, T, F)\n\n# matrix\nmatrix_1 <- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = T)\n\n# matrix by combining vectors\nvec1 <- c(1, 2)\nvec2 <- c(3, 4)\n\nmatrix_c <- cbind(vec1, vec2) # bind by columnn\nmatrix_r <- rbind(vec2, vec2) # bind by row\n\n\n\n\nData exploration of a data.frame\nCreate a data.frame\n\nmini_data <- data.frame(\n  age = c(20, 50, 32), \n  sex = c('male', 'female', 'male'), \n  has_covid = c(T, T, F)\n)\n\nGet the column (feature) names, dimension, number of rows (observation) and columns\n\ncolnames(mini_data)\ndim(mini_data)\nnrow(mini_data)\nncol(mini_data)\n\nSelect a variable (age) from the data\n\nmini_data$age\nmini_data['age']\nmini_data[, 1] # first column, which is 'age'\n\nFilter a variable based on another (for example, age for females (sex == 'female'))\n\nmini_data$age[mini_data$sex == 'female']\n\n# you can also break down the process:\nage <- mini_data$age\nsex <- mini_data$sex\nage[sex == 'female']\n\n\n\nDescriptive statistics\nContinuous variables\n\n# continuous variable x\nsummary(x)\nmin(x)\nmax(x)\nmean(x)\nmedian(x)\nquantile(x, 0.95)\nIQR(x) # interquartile range\n\nCategorical variables: count and percentage\n\n# continuous variable z\n# subjects per category in x\ntable(x)\n# percentage\ntable(x)/length(x) \n\n\n\nVisualisation\nWe let x, y be two continuous variables, and z be categorical. To create histogram, boxplot, scatterplot, you can use the following commands,\n\nhist(x) # histogram\nboxplot(x) # boxplot \nboxplot(x ~ z, data = data) # boxplot for two variables, where z is categorical\nplot(x,y)  # scatter plot of x, y\n\n\n\nHypothesis tests\n\nt-test\n\n\nchi-square tests\n\n(Content for Week 2 will come soon!)\n\n\nnon-parametric tests\n\n\n\nRegression\n\nLinear regression\n\n\nLogistic regression\n\n\nSurvival analysis"
  },
  {
    "objectID": "lab/ex_ttest.html",
    "href": "lab/ex_ttest.html",
    "title": "Exercise - t-test",
    "section": "",
    "text": "The weight of the hearts of 20 men with age between 25 and 55 years have been evaluated, and is given below (in ounces, 1 ounce = 28g)\n11.50 14.75 13.75 10.50 14.75 13.50 10.75 9.50 11.75 12.00\n10.50 11.75 10.00 14.50 12.00 11.00 14.00 15.00 11.50 10.25\n\n\nCreate a variable in R, and enter the data. Compute the mean weight of the hearts based on the formula; then verify it with R function.\n\n\n\n\n\n\nFormula: mean\n\n\n\nThe mean of data \\(X = (x_1, x_2, ... x_n)\\), \\(\\bar{x} = \\frac{1}{n}\\sum_{i = 1}^N x_i\\)\n\n\n\n\n\nCompute the 95% confidence interval for the mean. Verify your computed confidence interval with R function t.test(heart).\n\n\n\n\n\n\nFormula: confidence interval for the mean\n\n\n\n\n\n\n\n\n\nWe would like to know whether the mean heart weight is equal to 11 and 11.5.\nBefore you carry out hypothesis tests, you can gain useful insight by visualization. You can try to use histogram, Q-Q plot and boxplot, and compare the mean heart weight with 11 and 11.5.\nWhat can you conclude?\n\n\n\nFormulate hypothesis tests. Decide whether you need one-sided or two-sided test, and state your conclusion (with p-values and confidence intervals)."
  },
  {
    "objectID": "lab/ex_ttest.html#exercise-2-lung-function",
    "href": "lab/ex_ttest.html#exercise-2-lung-function",
    "title": "Exercise - t-test",
    "section": "Exercise 2 (lung function)",
    "text": "Exercise 2 (lung function)\nLung function has been measured on 106 medical students. Peak expiratory flow rate (PEF, measured in liters per minute) was measured three times in a sittinng position, and three times in a standing position.\nThe variables are\n\nAge (years)\nGender (1 is female, 2 is male)\nHeight (cm)\nWeight (kg)\nPEF measured three times in a sitting position (pefsit1, pefsit2, pefsit3)\nPEF measured three times in a standing position (pefsta1, pefsta2, pefsta3)\nMean of the three measurements made in a sitting position (pefsitm)\nMean of the three measurements made in a standing position (pefstam)\nMean of all six PEF values (pefmean)\n\n\n\n\n\n\n\nLung function data\n\n\n\nThis is the same dataset we have used in EDA (part I) from two days ago. You can use either PEFH98-english.dta, or PEFH98-english.csv data.\nIf you forgot how to load the data, you can refresh your knowledge by reading these notes (Example 2)\n\n\n\n2a)\nOpen PEFH98-english.dta (or PEFH98-english.csv) into R.\nPay attention to how gender is coded. We might have to modify it.\nDetermine the mean height for females. Calculate the standard deviation and a 95% confidence interval. How would you comment on this result?\nDo the same for males.\n\n\n2b)\nAssume that the average height for female students a few years ago was 167 cm. Does the height in the present material differ significantly?\nFormulate a null hypothesis, calculate a test statistic and p-value.\n\n\n2c)\nDo the values pefsit1 and pefsit2 differ significantly? Calculate a test statistic, the mean difference, and the 95% confidence interval, and formulate a conclusion. Interpret the results.\n\n\n2d)\nCarry out a t-test to decide whether pefsitm annd pefstam are significantly different.\n\n\n2e)\nAre the assumptions of the previous test reasonably fulfilled?\nYou should check that the difference between pefsitm and pefstam is normally distributed.\n\n\n\n\n\n\nExpand to read hint\n\n\n\n\n\nYou can create a new variable called difference by difference <- pefsitm - pefstam, then check the normality of difference by looking at histogram (hist(difference)), or QQ plot (qnorm difference)\n\n\n\n\n\n2f)\nCarry out a t-test to evaluate whether pefmean is signinficantly different for men and women.\nInterpret the results, and formulate a conclusion including p-value and confidence interval.\n\n\n2g)\nAre the assumptions fulfilled in the previous test (pefmean vs gender)?"
  },
  {
    "objectID": "lab/lab_inf_ci.html",
    "href": "lab/lab_inf_ci.html",
    "title": "Statistical inference",
    "section": "",
    "text": "Confidence interval\n\n\nHypothesis testing\n\nError\nType I error: conclude that there is an effect when there is not (false positive).\n\ncontrolled by significance level, \\(\\alpha\\)\nusually choose \\(\\alpha = 0.05\\)\n\nType II error: conclude there is not an effect when there really is (false negative).\n\npower: \\(1-\\beta\\)\na minimum for “good” power is usually 80%; i.e. 80% chance of correctly rejecting the null hypothesis if there is an effect."
  },
  {
    "objectID": "lab/lab_intro_rstudio.html#rstudio-and-posit",
    "href": "lab/lab_intro_rstudio.html#rstudio-and-posit",
    "title": "Getting started in RStudio",
    "section": "RStudio and Posit",
    "text": "RStudio and Posit\nRStudio is a free and open-source IDE (integrated development environment). RStudio IDE is developed by Posit, previously RStudio PBC.\nIt is convenient to download RStudio to your laptop or desktop; or use RStudio Cloud (need internet connection).\nWhen you open Rstudio, you will see something like this.\n\n\n\n\n\n\n\nEmpty bottom right panel\n\n\n\nYou might NOT see anything in the bottom right panel, because you might not have a Project yet.\nDon’t worry, we will learn how to create it."
  },
  {
    "objectID": "lab/lab_regression.html",
    "href": "lab/lab_regression.html",
    "title": "Regression analysis",
    "section": "",
    "text": "Linear regression\nTBC\n\n\nLogistic regression\n(Dataset birth might be switched out)\n\n# load data\nbirth_data <- haven::read_dta('data/birth.dta')\n\n# print the first rows of the data set\nhead(birth_data)\n\n# A tibble: 6 × 12\n     id low            age   lwt eth       smk   ptl ht      ui        fvt   ttv\n  <dbl> <dbl+lbl>    <dbl> <dbl> <dbl+l> <dbl> <dbl> <dbl+l> <dbl+l> <dbl> <dbl>\n1     4 1 [bwt < 25…    28   120 3 [oth…     1     1 0 [no]  1 [yes]     0     0\n2    10 1 [bwt < 25…    29   130 1 [whi…     0     0 0 [no]  1 [yes]     2     0\n3    11 1 [bwt < 25…    34   187 2 [bla…     1     0 1 [yes] 0 [no]      0     0\n4    13 1 [bwt < 25…    25   105 3 [oth…     0     1 1 [yes] 0 [no]      0     0\n5    15 1 [bwt < 25…    25    85 3 [oth…     0     0 0 [no]  1 [yes]     0     4\n6    16 1 [bwt < 25…    27   150 3 [oth…     0     0 0 [no]  0 [no]      0     5\n# … with 1 more variable: bwt <dbl>\n\n\n\nFit a logistic regression model for low and age\n\n# low ~ age \n\nlr_low_age <- glm(low ~ age, data = birth_data, family = 'binomial')\nsummary(lr_low_age)\n\n\nCall:\nglm(formula = low ~ age, family = \"binomial\", data = birth_data)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-1.0402  -0.9018  -0.7754   1.4119   1.7800  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)\n(Intercept)  0.38458    0.73212   0.525    0.599\nage         -0.05115    0.03151  -1.623    0.105\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 234.67  on 188  degrees of freedom\nResidual deviance: 231.91  on 187  degrees of freedom\nAIC: 235.91\n\nNumber of Fisher Scoring iterations: 4\n\n\n\n# the result regresssion coefficient is not odds ratio\nlr_low_age$coefficients\n\n(Intercept)         age \n 0.38458192 -0.05115294 \n\n# regression coefficients can also be extracted in this way:\ncoefficients(lr_low_age)\n\n(Intercept)         age \n 0.38458192 -0.05115294 \n\n# coef(lr_low_age)\n\n# confidence interval for age and intercept\nconfint(lr_low_age)\n\n                 2.5 %      97.5 %\n(Intercept) -1.0336270 1.847399861\nage         -0.1150799 0.008986436\n\n\n\n# to get odds ratio, exponentiate \nexp(coef(lr_low_age))\n\n(Intercept)         age \n  1.4690000   0.9501333 \n\nexp(confint(lr_low_age))\n\n                2.5 %   97.5 %\n(Intercept) 0.3557144 6.343305\nage         0.8912949 1.009027"
  },
  {
    "objectID": "lab/lab_eda_part1.html",
    "href": "lab/lab_eda_part1.html",
    "title": "Exploratory data analysis (Part I)",
    "section": "",
    "text": "Datasets\nR script (link)"
  },
  {
    "objectID": "lab/lab_eda_part1.html#exercise-1-weight",
    "href": "lab/lab_eda_part1.html#exercise-1-weight",
    "title": "Exploratory data analysis (Part I)",
    "section": "Exercise 1 (weight)",
    "text": "Exercise 1 (weight)\n\n1a\nGenerate a variable named weight, with the following measurements:\n50 75 70 74 95 83 65 94 66 65 65 75 84 55 73 68 72 67 53 65\n\nweight <- c(50, 75, 70, 74, 95, \n            83, 65, 94, 66, 65, \n            65, 75, 84, 55, 73, \n            68, 72, 67, 53, 65)\n\n\n\n1b\nMake a simple descriptive analysis of the variable, what are the mean, median, maximum, minimum and quantiles?\nHow to interpret the data?\n\nmean(weight)\n\n[1] 70.7\n\nmedian(weight)\n\n[1] 69\n\nmax(weight)\n\n[1] 95\n\nmin(weight)\n\n[1] 50\n\n# alternatively, \nsummary(weight)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   50.0    65.0    69.0    70.7    75.0    95.0 \n\n\n\n\n1c\nMake a histogram.\n\nhist(weight)\n\n\n\n\n\n\n1d\nMake a boxplot. What do the two dots on the top represent?\n\nboxplot(weight)\n\n\n\n\nThey are the largest two points in the dataset. These are outliers in this data.\n\n\n\n\n\n\n(Optional) Outliers in box plot\n\n\n\n\n\nThere are different ways to define outliers. The default box plot in R determines points beyond \\(Q_1 - 1.5\\times IQR\\) and \\(Q_3 + 1.5\\times IQR\\) are outliers. You can check the values of quartiles using summary(), and read up the documentation ?boxplot()."
  },
  {
    "objectID": "lab/lab_eda_part1.html#exercise-2-lung-function",
    "href": "lab/lab_eda_part1.html#exercise-2-lung-function",
    "title": "Exploratory data analysis (Part I)",
    "section": "Exercise 2 (lung function)",
    "text": "Exercise 2 (lung function)\nLung function has been measured on 106 medical students. Peak expiratory flow rate (PEF, measured in liters per minute) was measured three times in a sittinng position, and three times in a standing position.\nThe variables are\n\nAge (years)\nGender (1 is female, 2 is male)\nHeight (cm)\nWeight (kg)\nPEF measured three times in a sitting position (pefsit1, pefsit2, pefsit3)\nPEF measured three times in a standing position (pefsta1, pefsta2, pefsta3)\nMean of the three measurements made in a sitting position (pefsitm)\nMean of the three measurements made in a standing position (pefstam)\nMean of all six PEF values (pefmean)\n\n\n2a)\nDownload and open PEFH98-english.dta into R.\nIf you have problem with .dta data format, you can also use PEFH98-english.csv.\nPay attention to how gender is coded. We might have to modify it.\n\n# locate your datafile, set the path to your data\n# lung_data <- haven::read_dta('data/PEFH98-english.dta')\nlung_data <- read.csv('data/PEFH98-english.csv', sep = ',')\nhead(lung_data)\n\n  age gender height weight pefsit1 pefsit2 pefsit3 pefsta1 pefsta2 pefsta3\n1  20      1    165     50     400     400     410     410     410     400\n2  20      2    185     75     480     460     510     520     500     480\n3  21      2    178     70     490     540     560     470     500     470\n4  21      2    179     74     520     530     540     480     510     500\n5  20      2    196     95     740     750     750     700     710     700\n6  20      2    189     83     600     575     600     600     600     640\n   pefsitm  pefstam  pefmean\n1 403.3333 406.6667 405.0000\n2 483.3333 500.0000 491.6667\n3 530.0000 480.0000 505.0000\n4 530.0000 496.6667 513.3333\n5 746.6667 703.3333 725.0000\n6 591.6667 613.3333 602.5000\n\n# gender is coded as 1 and 2, but it looks like it's not a category but an integer (number)\n# we code it explicitly fo readability\nlung_data$gender <- factor(lung_data$gender, \n                           levels = c('1','2'),\n                           labels = c('female','male')) \nhead(lung_data)\n\n  age gender height weight pefsit1 pefsit2 pefsit3 pefsta1 pefsta2 pefsta3\n1  20 female    165     50     400     400     410     410     410     400\n2  20   male    185     75     480     460     510     520     500     480\n3  21   male    178     70     490     540     560     470     500     470\n4  21   male    179     74     520     530     540     480     510     500\n5  20   male    196     95     740     750     750     700     710     700\n6  20   male    189     83     600     575     600     600     600     640\n   pefsitm  pefstam  pefmean\n1 403.3333 406.6667 405.0000\n2 483.3333 500.0000 491.6667\n3 530.0000 480.0000 505.0000\n4 530.0000 496.6667 513.3333\n5 746.6667 703.3333 725.0000\n6 591.6667 613.3333 602.5000\n\n\n\n\n2b)\nHow many observations are there (number of subjects)? How do you get a list of variable names from your dataset?\n\nnrow(lung_data)\n\n[1] 106\n\ncolnames(lung_data)\n\n [1] \"age\"     \"gender\"  \"height\"  \"weight\"  \"pefsit1\" \"pefsit2\" \"pefsit3\"\n [8] \"pefsta1\" \"pefsta2\" \"pefsta3\" \"pefsitm\" \"pefstam\" \"pefmean\"\n\n\nMake a histogram for each of the following variables. Compute means, and interpret the results.\nheight\nweight\nage\npefsitm\npefstam\n\nhist(lung_data$height)\n\n\n\n\nWe repeat it for the other 4 variables. We can put them more compactly,\n\npar(mfrow = c(2, 2)) \n# we use this line to display (2 rows 2 columns)\n# by default it is 1 row 1 column\n# run this line to set it back to default:\n# par(mfrow = c(1, 1))\nhist(lung_data$weight)\nhist(lung_data$age)\nhist(lung_data$pefsitm)\nhist(lung_data$pefstam)\n\n\n\n\n\n\n2c)\nMake histograms for the variables height and pefmean for men and women separately. Also try to make boxplots.\nWhat conclusion can you draw?\n\nheight_f <- lung_data$height[lung_data$gender == 'female']\nheight_m <- lung_data$height[lung_data$gender == 'male']\n\npar(mfrow = c(1,2)) # plot in parallel\nhist(height_f)\nhist(height_m)\n\n\n\n# we can make it more customized\n# add axis limit, title and xaxis name\npar(mfrow = c(1,2)) # plot in parallel\nhist(height_f, main = 'Height: female', xlab = 'Height (cm)',\n     xlim = c(150, 200))\nhist(height_m, main = 'Height: male', xlab = 'Height (cm)',\n     xlim = c(150, 200))\n\n\n\n\nSimilarly, histogram for pefmean can be done in the same way.\n\npefmean_f <- lung_data$pefmean[lung_data$gender == 'female']\npefmean_m <- lung_data$pefmean[lung_data$gender == 'male']\n\npar(mfrow = c(1,2)) # plot in parallel\nhist(pefmean_f)\nhist(pefmean_m)\n\n\n\n\nNow we can make some boxplots\n\npar(mfrow = c(1, 2))\nboxplot(height ~ gender, data = lung_data, main = 'Height vs Gender')\n\n# it is also possible to remove the frame\nboxplot(pefmean ~ gender, data = lung_data, frame = F, main = 'PEFmean vs gender')\n\n\n\n\n\n\n2d)\nMake three scatterplots to compare\n\npefmean with height\npefmean with weight\npefmean with age\n\nWhat association do you see?\n\n# pefmean height\nplot(lung_data$pefmean, lung_data$height)\n\n\n\n# it is possible to customize \nplot(lung_data$pefmean, lung_data$height, \n     main = 'PEF mean vs height', \n     xlab = 'PEF mean', ylab = 'Height',\n     pch = 20)\n\n\n\n# pch: plotting symbols\n\npch = 20 is setting the symbol to small solid dots. You can try different values, from 0 to 25. Read more\n\npar(mfrow = c(1, 2))\n# pefmean weight\nplot(lung_data$pefmean, lung_data$weight, \n     main = 'PEF mean vs weight', \n     xlab = 'PEF mean', ylab = 'Weight',\n     pch = 20)\n\n# pefmean age\nplot(lung_data$pefmean, lung_data$age, \n     main = 'PEF mean vs age', \n     xlab = 'PEF mean', ylab = 'Age',\n     pch = 20)"
  },
  {
    "objectID": "lab/ex_eda_part1.html",
    "href": "lab/ex_eda_part1.html",
    "title": "Exercise - EDA (part I)",
    "section": "",
    "text": "Generate a variable named weight, with the following measurements:\n50 75 70 74 95 83 65 94 66 65 65 75 84 55 73 68 72 67 53 65\n\n\n\nMake a simple descriptive analysis of the variable, what are the mean, standard deviation, maximum, minimum and quantiles?\nHow to interpret the data?\n\n\n\nMake a histogram.\n\n\n\nMake a boxplot. What do the two dots on the top represent?"
  },
  {
    "objectID": "lab/ex_eda_part1.html#exercise-2-lung-function",
    "href": "lab/ex_eda_part1.html#exercise-2-lung-function",
    "title": "Exercise - EDA (part I)",
    "section": "Exercise 2 (lung function)",
    "text": "Exercise 2 (lung function)\nLung function has been measured on 106 medical students. Peak expiratory flow rate (PEF, measured in liters per minute) was measured three times in a sittinng position, and three times in a standing position.\nThe variables are\n\nAge (years)\nGender (1 is female, 2 is male)\nHeight (cm)\nWeight (kg)\nPEF measured three times in a sitting position (pefsit1, pefsit2, pefsit3)\nPEF measured three times in a standing position (pefsta1, pefsta2, pefsta3)\nMean of the three measurements made in a sitting position (pefsitm)\nMean of the three measurements made in a standing position (pefstam)\nMean of all six PEF values (pefmean)\n\n\n2a)\nDownload and open PEFH98-english.dta into R.\nIf you have problem with .dta data format, you can also use PEFH98-english.csv.\nPay attention to how gender is coded. We might have to modify it.\n\n\n2b)\nHow many observations are there (number of subjects)? How do you get a list of variable names from your dataset?\nMake a histogram for each of the following variables. Compute means, and interpret the results.\nheight\nweight\nage\npefsitm\npefstam\n\n\n2c)\nMake histograms for the variables height and pefmean for men and women separately. Also try to make boxplots.\nWhat conclusion can you draw?\n\n\n2d)\nMake three scatterplots to compare\n\npefmean with height\npefmean with weight\npefmean with age\n\nWhat association do you see?"
  },
  {
    "objectID": "lab/lab_intro_r.html",
    "href": "lab/lab_intro_r.html",
    "title": "Introduction to R",
    "section": "",
    "text": "R is a language and environment for statistical computing, data analysis, visualisation and graphics and many more. It is a free and open source software, under the terms of GNU General Public License.\nR runs on a wide variety of platforms, including Windows, Linux and MacOS."
  },
  {
    "objectID": "lab/lab_intro_r.html#create-a-numeric-variable",
    "href": "lab/lab_intro_r.html#create-a-numeric-variable",
    "title": "Introduction to R",
    "section": "Create a numeric variable",
    "text": "Create a numeric variable\nTo create a variable, you type variable_name <- variable_value in the console.\n\n# create a numeric variable number_1\na <- 3\na\n\n[1] 3\n\n\nYou can carry out **mathematical calculation8* on numeric variables, such as exponentiate, addition, division and many more.\n\n# assign values to variables a, b, c\na <- 3\nb <- 4\nc <- 7\n\n# calculate the average of a,b,c\n# output directly\n(a+b+c)/3\n\n[1] 4.666667\n\n# or, save into a new variable d\nd <- (a+b+c)/3\nd\n\n[1] 4.666667\n\n# e to the power of a (e = 2.7182)\nexp(a)\n\n[1] 20.08554"
  },
  {
    "objectID": "lab/lab_intro_r.html#data-types",
    "href": "lab/lab_intro_r.html#data-types",
    "title": "Introduction to R",
    "section": "Data types",
    "text": "Data types\nIn R, there are a few types of variables. The ones you will interact with are:\n\nnumeric (real numbers): 1.2, -5\ninteger: 1, 2, 2000\ncharacter (strings): “male”, “female”\nlogical (binary, 1/0): True or False\n\nNote that code that start with # are comments, and are not evaluated.\n\n# create a numeric variable number_1\nnumber_1 <- 1.2\n\n# a character variable student\nstudent <- 'hadley'\n\n# a logical variable true_or_false\ntrue_or_false <- T\n\nTo evaluate (or return) the variable you have created, you can either type the name of the variable, or print() with the variable name inside the bracket.\n\nnumber_1\n\n[1] 1.2\n\nprint(number_1)\n\n[1] 1.2\n\n\nYou can check the variable type using class(variable_name):\n\nclass(number_1)\n\n[1] \"numeric\"\n\nclass(student)\n\n[1] \"character\"\n\nclass(true_or_false)\n\n[1] \"logical\"\n\n\n\n\n\n\n\n\nName your variable\n\n\n\nIt is good practice to give your variable a name that is both easy to understand, and also valid.\n\nNames are case sensitive, VariableA is not the same as variablea\nNumbers can not be a variable name by itself. Combining numbers and letters is allowed, but should start with a letter, such as variable3, but NOT 22variable\nYou can use underscores (“snake_case” naming style). In fact it encourages readability, so it is my personal favoriate.\n\nAvoid the following:\n\nOther special characters, such as dot and dollar sign: var.A, var$A have special meanings in R.\nAvoid using function names like function, list and so on. If you really can’t think of a better name, you can use names my_function, list_1 to avoid the ambiguity."
  },
  {
    "objectID": "lab/lab_intro_r.html#vectors",
    "href": "lab/lab_intro_r.html#vectors",
    "title": "Introduction to R",
    "section": "Vectors",
    "text": "Vectors\nA vector is a list of values; it can be numeric, and also characters and logical.\nTo create a vector, use function c().\n\n# numeric\nnum_vector <- c(1, 2, 3, 4, 5)\nnum_vector\n\n[1] 1 2 3 4 5\n\n# character\nchar_vector <- c('student_a', 'student_b', 'student_c')\nchar_vector\n\n[1] \"student_a\" \"student_b\" \"student_c\"\n\n# logical \nlogical_vector <- c(T, F, T, F)\nlogical_vector\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\nThere are some shortcuts to create a sequence of values; not required to learn, but very useful.\n\n# numeric\n# num_vector <- c(1, 2, 3, 4, 5)\nnum_vector <- 1:5 # from 1 to 5\nseq(from = 1, to = 11, by = 2) # from 1 to 11, with 2 between each\n\n[1]  1  3  5  7  9 11\n\nrep(1, 5) # repeat 1 for 5 times\n\n[1] 1 1 1 1 1\n\n# character\n# char_vector <- c('student_a', 'student_b', 'student_c')\nchar_vector <- paste0('student_', c('a', 'b', 'c'))\nchar_vector\n\n[1] \"student_a\" \"student_b\" \"student_c\"\n\n\n\n\n\n\n\n\nTypes of elements in a vector\n\n\n\nIn a vector, types of the elements must be the same. If you try to combine multiple types of variables in the same vector, such as a numeric number and a character, R will try to convert them into the same type.\nTry to combine the following values into a vector, and see what happens.\n\n1.52, “student_a”\n1.52, TRUE (logical)\nTRUE, “student_a”\n\n\n\n\nCombine multiple vectors\nYou can combine multiple vectors using c(). For example, vec1 has 3 elements, vec2 has 2 elements (assuming that they are of the same type), combining them gives 5 elements.\n\nvec1 <- c(1, 3, 5)\nvec2 <- c(100, 101)\nc(vec1, vec2)\n\n[1]   1   3   5 100 101\n\n# you can also save it into a new variable, \n# so that you can access it in the future\nvec_combined <- c(vec1, vec2)\nvec_combined\n\n[1]   1   3   5 100 101"
  },
  {
    "objectID": "lab/lab_intro_r.html#matrix",
    "href": "lab/lab_intro_r.html#matrix",
    "title": "Introduction to R",
    "section": "Matrix",
    "text": "Matrix\nA matrix can be thought of as a stack of vectors. When you collect data from \\(n\\) patients (or subjects), you measure a few aspects on each patient such as age, sex, height and smoking. Let’s say you have measured \\(p\\) aspects. This forms a matrix of size \\(n \\times p\\).\nYou might not need to create a matrix from scratch in R (because the focus of this course is data analysis); but it is helpful to understand some basic data manipulation commands.\nYou can create a matrix using matrix(), with some parameters:\n\nmatrix_1 <- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = T)\nmatrix_1\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\nYou can also create a matrix by combining two vectors of the same size, using cbind() or rbind(), which stands for “column bind” and “rowbind”.\n\nvec1 <- c(1, 2)\nvec2 <- c(3, 4)\n\n# bind by columnn\nmatrix_c <- cbind(vec1, vec2)\nmatrix_c\n\n     vec1 vec2\n[1,]    1    3\n[2,]    2    4\n\n# bind by row\nmatrix_r <- rbind(vec1, vec2)\nmatrix_r\n\n     [,1] [,2]\nvec1    1    2\nvec2    3    4"
  },
  {
    "objectID": "lab/lab_intro_r.html#dataframe",
    "href": "lab/lab_intro_r.html#dataframe",
    "title": "Introduction to R",
    "section": "Dataframe",
    "text": "Dataframe\nDataframe, data.frame is a format of data commonly used in data analysis with R and python. It can be considered as a matrix, but allows a mixture of data types, such as numeric and categorical measurements (age and sex).\nIn this course, you will mostly be working with dataframes.\nWe create a small dataframe of 3 subjects:\n\nSubject 1 is a 20 years-old male who has covid\nSubject 2 is a 50 years-old female who has covid\nSubject 3 is a 32 years-old male who does not have covid\n\nThis is how you can present the dataframe, where each column has a different data type.\n\nmini_data <- data.frame(\n  age = c(20, 50, 32), \n  sex = c('male', 'female', 'male'), \n  has_covid = c(T, T, F)\n)\nmini_data\n\n  age    sex has_covid\n1  20   male      TRUE\n2  50 female      TRUE\n3  32   male     FALSE"
  },
  {
    "objectID": "lab/lab_intro_r.html#dimension-of-your-data",
    "href": "lab/lab_intro_r.html#dimension-of-your-data",
    "title": "Introduction to R",
    "section": "Dimension of your data",
    "text": "Dimension of your data\nYou can find the size of a vector with length().\nFor a matrix or dataframe, you can use dim(). It will return nrow ncol, number of rows and number of columns.\n\nvec1 <- c(1, 2)\nlength(vec1)\n\n[1] 2\n\n# matrix\nmat <- matrix(data = c(1, 2, 3, 4), nrow = 2, byrow = 2)\ndim(mat)\n\n[1] 2 2\n\n# dataframe\ndim(mini_data)\n\n[1] 3 3\n\n\n\n\n\n\n\n\ndim() or length()\n\n\n\nIf you use dim() on a vector, it returns NULL. Given that a vector is just a matrix with 1 row (or column), this seems insensible.\nNonetheless, dim() works on matrix objects. if you convert the vector into a matrix with nrow =1 or ncol = 1, dim() will work.\nIf you use length() on a matrix, it will return the total number of elements, i.e. ncol times nrow.\n\n\nYou can also use nrow(), ncol() to get the number of rows and columns explicitly.\n\n# ncol, nrow\n# dim(mini_data)\nnrow(mini_data)\n\n[1] 3\n\nncol(mini_data)\n\n[1] 3"
  },
  {
    "objectID": "lab/lab_intro_r.html#accessing-elements-in-your-data",
    "href": "lab/lab_intro_r.html#accessing-elements-in-your-data",
    "title": "Introduction to R",
    "section": "Accessing elements in your data",
    "text": "Accessing elements in your data\nFor a vector, you can access\n\nan element at a given position\nmultiple elements at given positions\n\nelements beyond, or below a certain element\n\nSometimes you might need to combine previous knowledge to get what you want (e.g. to know how many elements in total there are).\n\nletters <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n\n# 3rd letter\nletters[3]\n\n[1] \"c\"\n\n# 3rd, and 5th\nletters[c(3, 5)]\n\n[1] \"c\" \"e\"\n\n# letters beyond 4\nletters[5:8] # or, letters[5:length(letters)]\n\n[1] \"e\" \"f\" \"g\" \"h\"\n\n\nFor a matrix,\n\nmatrix[r, c] to get the element on \\(r\\)-th row, \\(c\\)-th column.\nmatrix[r, ], matrix[, c] to get all the elements on \\(r\\)-th row or \\(c\\)-th column\n\n\nmat_3by3 <- matrix(data = 1:9, nrow = 3, byrow = T)\nmat_3by3\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n# element (2,3)\nmat_3by3[2, 3]\n\n[1] 6\n\n# first row\nmat_3by3[1,]\n\n[1] 1 2 3\n\n\nFor a dataframe,\n\nyou can use indices (row, col) in the same way as matrices above;\nuse data$column_name, or data['column_name'] to access the entire column\n\nConventionally, each row is a subject, and each columnn is a variable (or aspect of measurement, feature, characteristic, risk factor etc).\n\nmini_data\n\n  age    sex has_covid\n1  20   male      TRUE\n2  50 female      TRUE\n3  32   male     FALSE\n\n# first row \nmini_data[1, ]\n\n  age  sex has_covid\n1  20 male      TRUE\n\n# second col\nmini_data[, 2]\n\n[1] \"male\"   \"female\" \"male\"  \n\n# via column name using $\nmini_data$age\n\n[1] 20 50 32\n\n# alternatively, \nmini_data['age']\n\n  age\n1  20\n2  50\n3  32\n\n\n\n\n\n\n\n\nFilter data based on criteria\n\n\n\nYou might have a task where you need to filter elements based on another variable: for example, select the age based on sex. This task is done in 2 steps:\n\ncreate a logical (binary, true or false) variable on sex, call it sex_indicator\nselect the elements in age vector, corresponding to sex_ind == TRUE. (The operator == evaluates whether the criteria is met)\n\nThe following example illustrates this process. You will use this a few times in the course, for example to select the height measured for men and women.\n\n\n\nage <- c(55, 60, 65)\nsex <- c('Male', 'Female', 'Male')\n\n# select age for only female\n# first create a variable indicating 'sex == Female'\n# i.e. if the element is Female, returns T; otherwise, F\n\nsex_indicator <- sex == 'Female'\nsex_indicator\n\n[1] FALSE  TRUE FALSE\n\n# next combine age with sex_indicator, this only selects the 2nd element\nage[sex_indicator] \n\n[1] 60\n\n# you can skip the middle step:\nage[sex == 'Female']\n\n[1] 60"
  },
  {
    "objectID": "lab/lab_intro_r.html#modify-existing-data-optional",
    "href": "lab/lab_intro_r.html#modify-existing-data-optional",
    "title": "Introduction to R",
    "section": "Modify existing data (optional)",
    "text": "Modify existing data (optional)\n\n\n\n\n\n\nKeep your original data safe!\n\n\n\nModifying an existing data is easy, but you should be aware of the risks. In this class we only modify data we created in the class so there is little risk, but you might have your own datasets to analyse in the future.\nYou should keep your original data in a safe place, and work on copies of it.\nVersion control is a good skill to learn.\n\n\n\n# vector\n# make e into E \nletters[5] <- 'E'\nletters\n\n[1] \"a\" \"b\" \"c\" \"d\" \"E\" \"f\" \"g\" \"h\"\n\n# matrix\n# make (1, 1) 20\nmat_3by3[1, 1] # originally was 1\n\n[1] 1\n\nmat_3by3[1, 1] <- 20\nmat_3by3\n\n     [,1] [,2] [,3]\n[1,]   20    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n# dataframe\n# make so that subject 2 does not have covid\nmini_data\n\n  age    sex has_covid\n1  20   male      TRUE\n2  50 female      TRUE\n3  32   male     FALSE\n\nmini_data$has_covid[2] <- F\nmini_data\n\n  age    sex has_covid\n1  20   male      TRUE\n2  50 female     FALSE\n3  32   male     FALSE"
  },
  {
    "objectID": "lab/lab_intro_r.html#working-directory-r-project",
    "href": "lab/lab_intro_r.html#working-directory-r-project",
    "title": "Introduction to R",
    "section": "Working directory, R project",
    "text": "Working directory, R project\nYou can think of the working directory as the folder where R looks for (and saves) your scripts by default.\nYou can check where your working directory by running the following command.\n\ngetwd()\n\n[1] \"/Users/manuelkz/_UiO_Teaching/UiO/teaching_mf9130e/lab\"\n\n\nYou can manually set this to a folder of your choosing by setwd(path).\nIt is recommanded to use R project. It sets a folder just for the current tasks you work on, so that you do not need to set the working directory every time you open RStudio. Read more about how to create an R project."
  },
  {
    "objectID": "lab/lab_intro_r.html#import-data-1",
    "href": "lab/lab_intro_r.html#import-data-1",
    "title": "Introduction to R",
    "section": "Import data",
    "text": "Import data\nData exist in different formats,\n\ncsv is one of the most commonly used data format for tabular data. If possible, it is a good idea to use this data format as it is readable by different languages and softwares\nxlsx is also good for storing tabular data; however it is slightly more complicated than csv.\nrda can be used to store R data (such as lists, higher dimensional arrays);\nSome formats are data created by foreign softwares (such as dta created by STATA), and they would require some specific R packages to load in.\n\nIt is difficult to summarise all the data formats here, so you should check the documentation on how to import and write (save) data of different types.\n\n# read a csv file\npenguins_mini <- read.csv('data/penguins_mini.csv', sep = ',')\n\npenguins_mini\n\n    species    island bill_length_mm bill_depth_mm flipper_length_mm\n1    Adelie Torgersen           40.3          18.0               195\n2    Adelie Torgersen             NA            NA                NA\n3    Adelie     Dream           40.9          18.9               184\n4    Adelie Torgersen           37.2          19.4               184\n5    Adelie     Dream           36.0          17.1               187\n6    Gentoo    Biscoe           46.2          14.5               209\n7 Chinstrap     Dream           46.5          17.9               192\n8 Chinstrap     Dream           43.5          18.1               202\n9    Gentoo    Biscoe           44.9          13.3               213\n  body_mass_g    sex year\n1        3250 female 2007\n2          NA   <NA> 2007\n3        3900   male 2007\n4        3900   male 2008\n5        3700 female 2009\n6        4800 female 2007\n7        3500 female 2007\n8        3400 female 2009\n9        5100 female 2008"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MF9130E - Introductory course in Statistics",
    "section": "",
    "text": "Welcome!\nYou are on the course website for MF9130E - Introductory Course in Statistics.\n\nThe course is intended for students and researchers who are interested in statistics and R programming, with applications in medical and healthcare data. No previous programming experience is required to participate in this course.\nThis website is developed by the instructors of the course, hosted for free and public access on Github. The course github repository can be accessed here.\nYou can check the course page by UiO for information related to applications, evaluations and other administrative matters.\nAbout home exam: information regarding home exam will be talked about in the class on the first and last days. Assignment tasks for home exam will be put in Canvas, and you should submit your assignment in Inspera. More information about the exam\n\n\nPreparation\nYou should have a working solution of R (either installed on your own laptop, or using Posit cloud) before the course.\nIt would also be helpful if you familiarize yourself with the course website.\n\nGet Started provides some information about software installation, where to download data and code, and some resources.\nCourse material provides an overview of the material and corresponding links for the topics we will cover.\nR Lab and Code hosts the lab session notes.\n\n\n\n\nSchedule\nYou can find the official course schedule provided by University of Oslo here. If there is an error in the time and place on this page, please refer to the official schedule.\n\nWeek 1\n\n\n\n\n\n\n\n\n\nDate\nTime\nTopic\nPlace\n\n\n\n\nApr 24\n12:45-16:00\nLecture: course introduction, data and descriptive statistics\nDME, Lille auditorium\n\n\nApr 25\n08:30-11:45\nGuided lab session: introduction to R, descriptive statistics with R\nDME, Auditorium 13\n\n\nApr 25\n12:45-16:00\nLecture: probability, Bayes law, diagnostic tests, distributions\nDME, Auditorium 13\n\n\nApr 26\n08:30-11:45\nGuided lab session\nDME, Store auditorium\n\n\nApr 26\n12:45-16:00\nLecture: statistical inference, hypothesis testing, confidence intervals, t-tests\nDME, Store auditorium\n\n\nApr 27\n08:30-11:45\nGuided lab session\nDME, Runde auditorium R105\n\n\nApr 27\n12:45-16:00\nLecture: categorical data analysis\nDME, Runde auditorium R105\n\n\nApr 28\n08:30-11:45\nGuided lab session\nDME, Store Auditorium\n\n\n\n\n\nWeek 2\n\n\n\n\n\n\n\n\n\nDate\nTime\nTopic\nPlace\n\n\n\n\nMay 8\n08:30-11:45\nLecture and lab: exploratory data analysis, transformation, non-parametric methods\nDME, Lille auditorium\n\n\nMay 8\n12:45-16:00\nLecture and lab: sample size, statistical power\nDME, Lille auditorium\n\n\nMay 9\n08:30-11:45\nLecture: study designs, principle of clinical trials\nHelga Engs hus Auditorium 3\n\n\nMay 9\n12:45-16:00\nLecture and lab: regression I\nHelga Engs hus Auditorium 3\n\n\nMay 10\n08:30-11:45\nLecture: regression II\nDME, Auditorium 13\n\n\nMay 10\n12:45-16:00\nLecture and lab: regression II\nDME, Auditorium 13\n\n\nMay 11\n08:30-11:45\nLecture and lab: regression III\nDME, Auditorium 13\n\n\nMay 11\n12:45-16:00\nLecture and lab: survival analysis, course summary\nDME, Auditorium 13"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the course",
    "section": "",
    "text": "The aim of the course is to make the participants acquainted with basic statistical ideas and methods. No special previous knowledge of mathematics or statistics is assumed. The statistical software R and the RStudio environment will be used in many of the exercises. Analysis of examples from biomedical research will be emphasized.\n\nContact\n\nManuela Zucknick: manuela.zucknick@medisin.uio.no\nValeria Vitelli: valeria.vitelli@medisin.uio.no\nAlvaro Kohn Luque: a.k.luque@medisin.uio.no\nChi Zhang: chi.zhang@medisin.uio.no"
  },
  {
    "objectID": "get_started/get_started.html",
    "href": "get_started/get_started.html",
    "title": "Get started",
    "section": "",
    "text": "Here you will find useful information on how to get started.\nIn this workshop we will be using R. You can either\n\n(recommended) have R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\n\nOption 1: Set up your RStudio on your laptop\nYou will need both R and Rstudio, they are two separate things.\nYou can download Rstudio here. In this page it will ask you to install R, so it should be clear to follow.\n\nYou can download R for Linux, macOS or Windows here or here\n\nOnce you have finished installing both R and Rstudio, open Rstudio, and you should be seeing something like this:\n\n\n\n\n\n\n\nTip\n\n\n\nWatch these YouTube videos if you are stuck.\n\n\n\n\nOption 2: Use Posit Cloud\n\n\n\n\n\n\nNote\n\n\n\nIt is recommended to have R and Rstudio installed on your laptop, this is because you have a better control of where you prefer to download data and course material. This is also useful when you want to analyse your own datasets. For example, you might have to upload datafiles to the server for Posit Cloud to work.\nHowever, if there is a problem with the installation, you can use Posit Cloud as an alternative.\nOn Tuesday morning we will see if most people can successfully make R run on their laptop and make necessary adjustments.\n\n\nPosit Cloud is free of charge for personal users. You need to sign up for a new user account and have internet connection.\n\nOnce you signed up, you can open a new workspace, and it will look like something like this. If it is the first time you use Posit Cloud, it will be empty (i.e. no script or data).\n\n\n\nData\nThe datasets used in this course are stored in this folder.\n\nDownload data\n\nGo to the repository, select the data you want to download by left-click the file name\nIf it is a dataset in .csv, .txt format, you will see something like this\n\n\n\nfind Raw button, right-click, you will see a list of options\nchoose Download Linked File, this will download the data into your default download folder\nalternatively, choose Download linked file as… so that you can change where you put it and file name.\n\n\nIf it is a dataset in .dta, .xlsx or other format, you might not see the data directly:\n\n\n\nfind Download button, left-click, and you will download it into your default download folder.\n\n\nOptional: download data via URL\nIf you feel like it, you can also download data inside R via URL. You can read more about it here.\n\n\n\n\nCode\nR scripts are stored in this folder.\nTo download an R script, it is similar to downloading a dataset\n\nAlternatively, you can create your own R script locally inside Rstudio, by copy and paste the script from Github.\n\n\nResources\nYou will find the material used in class on this page.\nWe keep updating the material, so please stay tuned!\n\nBooks and papers\nYou can find these books in the library.\n\nEssential medical statistics (Kirkwood and Sterne, 2nd edition, 2003) (link\nStatistiske metoder i medisin og helsefag (Aalen, Frigessi, Moger, Scheel, Skovlund og Veierød, 2 utg, 2018) (link)\n\n\n\nVideos\nInstall R and Rstudio YouTube videos"
  },
  {
    "objectID": "for_instructors/how-to.html",
    "href": "for_instructors/how-to.html",
    "title": "MF9130E - V23",
    "section": "",
    "text": "DO NOT EDIT\ndoc folder is generated automatically when render. Do not edit by hand.\n\n\nWhere are my content\nLecture notes\n\ncourse_material/course_material_overview.qmd: overview with a table. this is where you edit the links to each topic\nnotes_diagnostic_tests.qmd: this is an example of qmd notes. renders to html.\nexample.pdf: an example of pdf notes. downloadable by students directly from the browser\n\nLab content\n\nlab/code/ stores code\nlab/data/ stores data\n\n\n\nThe course website\nThe website is linked to the github repository, specifically,\n\nHome links to index.qmd\nGet started links to get_started/get_started.qmd\nCourse material links to course_material/course_material_overview.qmd\nR labs and code links to lab/overview.qmd, which links a bunch of sub material\n\nThe overall appearance is controlled by _quarto.yml.\n\n\nHow to modify the content\nThe website is made by quarto, which is a better version of Rmarkdown. The way code chunk works is exactly the same as Rmarkdown (only that it supports a few more languages in the same file).\nYou might need to install quarto and upgrade Rstudio to the latest version, to be able to render the documents by yourself.\n\nRecommended workflow\n\nClone the repo to your local\nMake a branch\ntest render index.qmd, see if the whole website renders\nchange something on the branch\ntest render the qmd files you modified. Make sure that the path are set properly so that files can be loaded properly\npush to remote\nmake a pull request, someone will take over from here\n\n\n\nDeploy changes to the website (avoid this if you are not sure!)\npush all modifications to github, the site will update itself momentarily (after the CI/CD are successful)\nYou can also let me know if you need any help with the website or text."
  },
  {
    "objectID": "for_instructors/plan.html",
    "href": "for_instructors/plan.html",
    "title": "MF9130E - V23",
    "section": "",
    "text": "Self study sessions\nLab sessions"
  },
  {
    "objectID": "for_instructors/plan.html#monday-m",
    "href": "for_instructors/plan.html#monday-m",
    "title": "MF9130E - V23",
    "section": "Monday (M)",
    "text": "Monday (M)\n\nAfternoon: lecture: Intro, descriptive statistics (M)"
  },
  {
    "objectID": "for_instructors/plan.html#tuesday-ca",
    "href": "for_instructors/plan.html#tuesday-ca",
    "title": "MF9130E - V23",
    "section": "Tuesday (C,A)",
    "text": "Tuesday (C,A)\n\nMorning: R lab (C)\n9:00-10:00 Introduction to R\n10:15-11:00 Descriptive statistics\n11:00-12:00 Lab practice, plus discussion\n\n\nAfternoon: lecture: Probability, Diagnostic testing (A)\n13:00-13:15 Intro to probabilites and diagnostic testing\n13:15-14:30 Self study\n14:30-15:45 Paper and discussions in groups (COVID testing)\n15:45-16:00 Wrap up"
  },
  {
    "objectID": "for_instructors/plan.html#wednesday-av",
    "href": "for_instructors/plan.html#wednesday-av",
    "title": "MF9130E - V23",
    "section": "Wednesday (A,V)",
    "text": "Wednesday (A,V)\n\nMorning: R lab, lecture: distributions, simulation (A)\n9:00 - 9:15 Intro to probability distributions\n9:15 - 10:15 Self study\n10:15 - 11:45 R lab (Simulations)\n11:45 - 12:00 Wrap up\n\n\nAfternoon: lecture: confidence interval, t-test (V)\n13:00-13:30 lecture on confidence interval (intro)\n13:30-14:30 self study CI\n14:30-15:15 intro on testing - t test (one sample), simplest situation - t test (two sample)\n15:15-16:00 self study/home\n\n\nThursday (C,V)\n\nMorning: R lab (C)\n9:00-9:45 Lab\n\nrepeat theory\nR example\n\n9:45 - 11:00 Lab\n11:00-11:30 Lab (discussion)\n\n\nAfternoon: lecture: proportions, tables, chi-sq (V)\n12:30-13:30 lecture\n\nproportions (CI)\ntables\nrisks\n\n13:30-14:30 self study\n14:30-15:15 V intro to chi-sq test"
  },
  {
    "objectID": "for_instructors/plan.html#monday-cv",
    "href": "for_instructors/plan.html#monday-cv",
    "title": "MF9130E - V23",
    "section": "Monday (C,V)",
    "text": "Monday (C,V)\n\nMorning: lecture + lab: transformations, EDA, non-parametric tests (C)\n\n\nAfternoon: lecture + lab: sample size (V)"
  },
  {
    "objectID": "for_instructors/plan.html#tuesday-jo-m",
    "href": "for_instructors/plan.html#tuesday-jo-m",
    "title": "MF9130E - V23",
    "section": "Tuesday (Jo? M)",
    "text": "Tuesday (Jo? M)\nMorning: Study design (Jo?)\nAfternoon: regression (M)"
  },
  {
    "objectID": "for_instructors/plan.html#wednesday-mc",
    "href": "for_instructors/plan.html#wednesday-mc",
    "title": "MF9130E - V23",
    "section": "Wednesday (M,C?)",
    "text": "Wednesday (M,C?)\nMorning: regression\nAfternoon: regression"
  },
  {
    "objectID": "for_instructors/plan.html#thursday-m",
    "href": "for_instructors/plan.html#thursday-m",
    "title": "MF9130E - V23",
    "section": "Thursday (M)",
    "text": "Thursday (M)"
  }
]