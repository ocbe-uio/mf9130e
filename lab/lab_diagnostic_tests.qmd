---
title: "Diagnostic tests"
description: "bla bla"
format: 
  html:
    code-fold: false
    code-tools: true
editor: source
---

# Sensitivity and Specificity of COVID-19 test

In this R lab we will practice with the concepts of sensitivity and specificity of COVID-19 test. The actual sensitivity and specificity values can be very different for different types of tests (for example **RT-PCR** vs **rapid antigent tests**). Besides the technical performance of the test, other aspects like changes in viral load along the disease course and between individuals can also play a large roles. For this exercise, we will assume the following values:

-   RT-PCR test: sensitivity 95% and specificity 99%.

-   Rapid antigen test: sensitivity 75% and specificity of 98%.

We start by saving these values in variables

```{r}
sens_pcr=0.95 #sensitivity of the RT-PCR test
spec_pcr=0.99 #specificity of the RT-PCR test

sens_ant=0.75 #sensitivity of the rapid antigen test
spec_ant=0.98 #specificity of the rapid antigen test
```

Next, we will compute **PPV** and **NPV** for both COVID-19 test types. We can use the formulas obtained using Bayes' law, but besides the values of sensitivity and specificity of each test, we will need the prevalence of the population that we are testing.

$$
PPV = \frac{\text{sens} \cdot \text{prev}}{\text{sens} \cdot \text{prev} + (1-\text{spes}) \cdot (1-\text{prev})}
$$

$$
NPV = \frac{\text{spes} \cdot (1-\text{prev}) }{(1-\text{sens}) \cdot \text{prev} + \text{spes} \cdot (1-\text{prev})}
$$

Let us first assume a relatively high COVID-19 prevalence of 10% and compute PPV and NPV for the RT-PCR test.

```{r}
## RT-PCR test

prev=0.1 #prevalence

#compute PPV for RT-PCR test
PPV_pcr=(sens_pcr * prev)/(sens_pcr*prev + (1-spec_pcr)*(1-prev))  
#compute NPV for RT-PCR test
NPV_pcr=(spec_pcr *(1- prev))/((1-sens_pcr)*prev + spec_pcr*(1-prev)) 

print(PPV_pcr) #print PPV for RT-PCR test
print(NPV_pcr) #print NPV for RT-PCR test

```

Next, we assume the same prevalence and compute PPV and NPV for the rapid antigen test.

```{r}
## Rapid antigen test

prev=0.1 #prevalence

#compute PPV for RT-PCR test
PPV_ant=(sens_ant * prev)/(sens_ant*prev + (1-spec_ant)*(1-prev))  
#compute NPV for RT-PCR test
NPV_ant=(spec_ant *(1- prev))/((1-sens_ant)*prev + spec_ant*(1-prev)) 

print(PPV_ant) #print PPV for RT-PCR test
print(NPV_ant) #print NPV for RT-PCR test

```

## Effect of Prevalence

COVID-19 prevalence oscillated very much during the pandemic and was very different depending on the specific locations. It is interesting to see how PPV and NPV depend on the prevalence. For that, we define a vector of different prevalences and apply the previous formulas to obtain PPV and NPV for all the prevalences in that vector.

```{r}
## RT-PCR test

# vector containing different prevalence values
prev_vector=c(0.001,0.005,0.01,0.025,0.05,0.075,0.1) 

#compute PPV for RT-PCR test
PPV_pcr=(sens_pcr * prev_vector)/(sens_pcr*prev_vector + (1-spec_pcr)*(1-prev_vector))  
#compute NPV for RT-PCR test
NPV_pcr=(spec_pcr *(1- prev_vector))/((1-sens_pcr)*prev_vector + spec_pcr*(1-prev_vector)) 

print(PPV_pcr) #print PPV for RT-PCR test
print(NPV_pcr) #print NPV for RT-PCR test

```

Note that the outputs are vectors containing all the PPV and NPV values for different prevalences. We can easily make a plot to observe how the PPV value changes with the prevalence.

```{r}
plot(prev_vector, PPV_pcr, 
     main="RT-PCR test", 
     xlab="Prevalence", 
     ylab="PPV",
     type='o') 
```

Next, we do a plot to observe how the NPV changes with the prevalence

```{r}
plot(prev_vector, NPV_pcr, 
     main="RT-PCR test", 
     xlab="Prevalence", 
     ylab="NPV",
     type='o')
```

## Exercise: Prevalence plot for rapid antigen test

Generate the same plot as above for the rapid antigen test.

## Visualization using personograph

In this section we will use a package called personograph to further visualize the influence of sensitivity, specificity and prevalence on the interpretetion of COVID-19 test results. To install the package run the following commands.

```{r}
#install.packages("devtools")
#devtools::install_github("joelkuiper/personograph")
library(personograph)
```

If successful, you can continue and generate the plots. But if you run into problems installing the package, you have to try solving those before.

The input to the package personograph are two lists, one containing the number of false negatives (FN), true positives (TP), false positive (FP) and true negatives (TN); The second list contain the colors of FN, TP, FP and TN. In the next chunck we generate both list

```{r}
prev=0.2 #prevalence value

# building a list with the values of FN, TP, FP and TN
data=list(FN = (1-sens_pcr)*prev, TP = sens_pcr*prev, FP = (1-spec_pcr)*(1-prev), TN = spec_pcr*(1-prev))

# bulding a list containing the colors that we want to plot FN, TP, FP and TN 
colorlist = list(FN = "darkred", TP = "red", FP = "darkgreen", TN = "green")


```

Next, we use the command personograph calling the list

```{r}
suppressWarnings(
personograph(data, 
             colors = colorlist, 
             fig.title = paste0("PPV = ", round(100*PPV_pcr), "%, NPV = ", round(100*NPV_pcr), "%"),
             n.icons = 400, 
             dimensions = c(20, 20))
)
```

```{r}
prev=0.05
data=list(FN = (1-sens_ant)*prev, TP = sens_ant*prev, FP = (1-spec_ant)*(1-prev), TN = spec_ant*(1-prev))

colorlist = list(FN = "darkred", TP = "red", FP = "darkgreen", TN = "green")

suppressWarnings(
personograph(data, 
             colors = colorlist, 
             fig.title = paste0("PPV = ", round(100*PPV_ant), "%, NPV = ", round(100*NPV_ant), "%"),
             n.icons = 400, 
             dimensions = c(20, 20)
))
```
